import{_ as i,c as a,a as h,o as n}from"./app-BoLhbCbE.js";const k={};function l(t,s){return n(),a("div",null,s[0]||(s[0]=[h(`<h2 id="优化加载速度的方案" tabindex="-1"><a class="header-anchor" href="#优化加载速度的方案"><span>优化加载速度的方案</span></a></h2><h3 id="_1-减少http请求" tabindex="-1"><a class="header-anchor" href="#_1-减少http请求"><span><mark>1. 减少HTTP请求</mark></span></a></h3><p><mark class="note">HTTP请求是影响页面加载速度的关键因素。</mark>每个资源请求都需要建立连接、传输数据，这会显著增加整体加载时间。</p><p>减少请求次数可以通过多种方式实现：</p><ul><li><p>将多个CSS文件合并为单个样式表</p></li><li><p>将多个JavaScript文件打包成单一文件</p></li><li><p>使用CSS雪碧图技术将多个小图标合并为一张大图</p></li><li><p>对于API请求，可以<mark class="note">将多个接口调用合并为单个请求</mark>，通过参数区分不同数据需求</p></li></ul><p>这些策略能有效降低网络往返次数，从而加快页面呈现速度。</p><h3 id="_2-静态资源优化" tabindex="-1"><a class="header-anchor" href="#_2-静态资源优化"><span><mark>2. 静态资源优化</mark></span></a></h3><p>文件压缩是减小资源体积的直接手段，图片优化尤为关键：</p><ul><li><p>根据场景选择合适格式（如 <code>WebP</code> 替代 <code>JPEG/PNG</code>）</p></li><li><p>使用各种库<mark class="note">压缩图片</mark>（比如我使用过 <code>Canvas API</code> 进行压缩，也用过 <code>Compressor.js</code> 进行压缩）</p></li><li><p>启用<mark class="note">服务器端 <code>GZIP</code> 压缩</mark>能进一步减小文本类资源传输体积，通常可达到60-70%的压缩率。</p></li></ul><h3 id="_3-缓存策略" tabindex="-1"><a class="header-anchor" href="#_3-缓存策略"><span><mark>3. 缓存策略</mark></span></a></h3><p>合理利用浏览器缓存可避免重复下载资源。</p><div class="hint-container tip"><p class="hint-container-title">强制缓存与协商缓存</p><p>强制缓存通过 <code>Cache-Control</code> 和 <code>Expires</code> 响应头实现，让浏览器直接使用本地副本而不发起请求；</p><p>协商缓存通过 <code>ETag</code> 和 <code>Last-Modified</code> 机制，在资源更新时才重新下载。</p></div><ul><li><p>静态资源应设置长期缓存（如一年），并使用内容哈希值实现永久缓存。</p></li><li><p>动态内容适合短时间缓存（几分钟），用户私有数据需设置private缓存策略。</p></li></ul><h3 id="_4-代码与资源加载优化" tabindex="-1"><a class="header-anchor" href="#_4-代码与资源加载优化"><span><mark>4. 代码与资源加载优化</mark></span></a></h3><p>脚本加载策略直接影响渲染性能。</p><ul><li><p><code>async</code>属性使脚本<mark class="note">异步加载</mark>不阻塞解析， <code>defer</code>属性延迟执行直到文档解析完成。</p></li><li><p><mark class="note">懒加载</mark>技术，延迟非视口内资源（如图片、组件）的加载，当用户滚动到附近位置时再触发。</p></li><li><p><mark class="note">预加载</mark>关键资源（如首屏CSS、核心JS）通过 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 实现。</p></li><li><p><mark class="note">预连接</mark>重要域名，通过 <code>preconnect</code> 提前建立TCP连接。</p></li><li><p><mark class="note">按需加载</mark>模块化代码,仅在需要时获取，避免初始化加载过大包体积。</p></li></ul><h3 id="_5-渲染性能优化" tabindex="-1"><a class="header-anchor" href="#_5-渲染性能优化"><span><mark>5. 渲染性能优化</mark></span></a></h3><p>减少DOM操作频率能显著提升响应速度。</p><ul><li>批量修改优于多次单点更新，使用<code>DocumentFragment</code>进行离线操作再整体应用。</li></ul><p>示例代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 不推荐的做法：频繁操作DOM</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">div</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">innerText</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Item </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">i</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">appendChild</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 推荐的做法：使用文档片段</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fragment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createDocumentFragment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">div</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">innerText</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Item </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">i</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fragment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">appendChild</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">appendChild</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fragment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>对于高频操作，选择使用防抖或节流。</p></li><li><p>CSS选择器保持简洁，减少嵌套层级。</p></li></ul><h3 id="_6-构建工具优化" tabindex="-1"><a class="header-anchor" href="#_6-构建工具优化"><span><mark>6. 构建工具优化</mark></span></a></h3><p>对于采用 Webpack 的项目，这些优化策略能显著提升性能：</p><p><strong>智能代码分割</strong></p><ul><li><p>通过 splitChunks 配置将公共依赖模块（如 React/Vue）分离为独立 chunk</p></li><li><p>按路由动态分割实现按需加载</p></li><li><p>将 Webpack 运行时文件单独打包（runtimeChunk）避免频繁缓存失效</p></li></ul><p><strong>Tree Shaking 深度优化</strong></p><ul><li><p>配合 ES 模块语法实现静态分析</p></li><li><p>在 package.json 中标记副作用文件（sideEffects）</p></li><li><p>使用按需导入替代全量导入（如 lodash-es）</p></li></ul><p><strong>高级压缩策略</strong></p><ul><li><p>TerserPlugin 进行多进程并行压缩</p></li><li><p>CssMinimizerPlugin 提取并压缩 CSS</p></li><li><p>配置 Gzip/Brotli 压缩生成预压缩版本</p></li></ul><p><strong>资源优化插件</strong></p><ul><li><p>PurgeCSSPlugin 分析并移除未使用的 CSS 规则</p></li><li><p>ImageMinimizerPlugin 自动压缩图片资源</p></li><li><p>CompressionPlugin 生成预压缩的静态资源</p></li></ul><p><strong>持久化缓存优化</strong></p><ul><li><p>配置 cache 选项启用持久化缓存</p></li><li><p>使用 hash/contenthash 实现精准缓存控制</p></li><li><p>模块 ID 固化防止不必要的缓存失效</p></li></ul><h3 id="_7-使用web-worker进行多线程处理" tabindex="-1"><a class="header-anchor" href="#_7-使用web-worker进行多线程处理"><span><mark>7. 使用Web Worker进行多线程处理</mark></span></a></h3><p>JavaScript本质上是单线程的，这意味着它不能同时执行多个任务。当大量计算任务阻塞主线程时，用户可能会遇到界面卡顿的问题。</p><p>Web Worker允许开发者在独立线程中执行JavaScript代码，从而避免阻塞主线程。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">worker.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">onmessage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Result from worker:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">postMessage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> task</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">heavyComputation</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// worker.js</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">onmessage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">task</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">heavyComputation</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">reduce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">acc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> acc</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">postMessage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>优势：</p><ul><li><p>通过减少直接DOM操作，提升渲染性能。</p></li><li><p>简化了开发流程，提供更高效的状态管理和组件更新机制。</p></li></ul><p>挑战：</p><ul><li><p>虚拟DOM的引入可能会增加内存占用，尤其是在大量节点更新的场景中。</p></li><li><p>对于非常简单的应用，虚拟DOM的性能优势可能并不明显。</p></li></ul><h3 id="_8-使用虚拟dom提升渲染性能" tabindex="-1"><a class="header-anchor" href="#_8-使用虚拟dom提升渲染性能"><span><mark>8. 使用虚拟DOM提升渲染性能</mark></span></a></h3><div class="hint-container tip"><p class="hint-container-title">什么是虚拟DOM？</p><p>虚拟DOM（Virtual DOM）是React等前端框架采用的一种技术，通过在内存中维护一个虚拟的DOM树，避免直接操作真实DOM，从而提高渲染性能。虚拟DOM可以高效地计算差异并将最小的更新应用到真实DOM上。</p></div><h3 id="_9-使用内容分发网络-cdn" tabindex="-1"><a class="header-anchor" href="#_9-使用内容分发网络-cdn"><span><mark>9. 使用内容分发网络（CDN）</mark></span></a></h3><div class="hint-container tip"><p class="hint-container-title">什么是CDN？</p><p>CDN（Content Delivery Network）通过将静态资源（如图片、CSS、JavaScript）分布到全球多个服务器节点，使用户可以从最近的服务器获取资源，减少了请求延迟和带宽消耗。</p></div><p>示例：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!--</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> 使用CDN加载静态资源</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> --</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">link</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stylesheet</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> href</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://cdn.example.com/styles.css</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://cdn.example.com/main.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="优化实施原则" tabindex="-1"><a class="header-anchor" href="#优化实施原则"><span>优化实施原则</span></a></h2><p>性能优化应遵循分层实施策略：网络层优化（减少请求、CDN分发）优先，资源层优化（压缩、缓存）次之，最后进行运行时优化（渲染、脚本执行）</p>`,50)]))}const e=i(k,[["render",l]]),r=JSON.parse('{"path":"/article/luhcmk00/","title":"前端优化加载速度","lang":"zh-CN","frontmatter":{"title":"前端优化加载速度","createTime":"2025/06/26 20:38:30","permalink":"/article/luhcmk00/","tags":["性能优化","前端开发"],"excerpt":"今天面了Momenta，感觉体验非常好！其中面试官问的这个问题个人感觉回答的不是很好，那就来梳理一下吧！","description":"优化加载速度的方案 1. 减少HTTP请求 HTTP请求是影响页面加载速度的关键因素。每个资源请求都需要建立连接、传输数据，这会显著增加整体加载时间。 减少请求次数可以通过多种方式实现： 将多个CSS文件合并为单个样式表 将多个JavaScript文件打包成单一文件 使用CSS雪碧图技术将多个小图标合并为一张大图 对于API请求，可以将多个接口调用合并...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端优化加载速度\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-01T16:52:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/luhcmk00/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"前端优化加载速度"}],["meta",{"property":"og:description","content":"优化加载速度的方案 1. 减少HTTP请求 HTTP请求是影响页面加载速度的关键因素。每个资源请求都需要建立连接、传输数据，这会显著增加整体加载时间。 减少请求次数可以通过多种方式实现： 将多个CSS文件合并为单个样式表 将多个JavaScript文件打包成单一文件 使用CSS雪碧图技术将多个小图标合并为一张大图 对于API请求，可以将多个接口调用合并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-01T16:52:49.000Z"}],["meta",{"property":"article:tag","content":"前端开发"}],["meta",{"property":"article:tag","content":"性能优化"}],["meta",{"property":"article:modified_time","content":"2025-07-01T16:52:49.000Z"}]]},"readingTime":{"minutes":5.14,"words":1542},"git":{"createdTime":1750945489000,"updatedTime":1751388769000,"contributors":[{"name":"221250108","username":"221250108","email":"221250108@smail.nju.edu.cn","commits":3,"avatar":"https://avatars.githubusercontent.com/221250108?v=4","url":"https://github.com/221250108"}]},"autoDesc":true,"filePathRelative":"前端开发/前端优化加载速度.md","headers":[],"categoryList":[{"id":"0ffed7","sort":10000,"name":"前端开发"}]}');export{e as comp,r as data};

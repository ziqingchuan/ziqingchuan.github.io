import{_ as i,c as a,a as e,o as t}from"./app-BE5JaOw_.js";const n={};function h(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="vue-3-双向绑定的核心原理" tabindex="-1"><a class="header-anchor" href="#vue-3-双向绑定的核心原理"><span>Vue 3 双向绑定的核心原理</span></a></h2><p>Vue 3 依然遵循“数据驱动视图”的理念，但响应式系统的底层实现从 <code>Object.defineProperty</code> 改为了 <strong><code>Proxy</code></strong>，同时保留了依赖收集、Watcher 等核心机制，但流程上更高效。</p><h3 id="一、响应式系统的底层-proxy-代理" tabindex="-1"><a class="header-anchor" href="#一、响应式系统的底层-proxy-代理"><span>一、响应式系统的底层：Proxy 代理</span></a></h3><p>Vue 3 用 <code>Proxy</code> 替代 <code>Object.defineProperty</code> 实现数据劫持，这是两者最核心的区别。</p><h4 id="proxy-的优势" tabindex="-1"><a class="header-anchor" href="#proxy-的优势"><span>Proxy 的优势</span></a></h4><ul><li><strong>劫持整个对象</strong>：<code>Object.defineProperty</code> 需要遍历对象的每个属性单独设置 getter/setter，而 <code>Proxy</code> 可以直接代理整个对象，包括新增属性、删除属性等操作（解决了 Vue 2 中对象新增属性无法触发响应的问题）。</li><li><strong>支持数组劫持</strong>：<code>Proxy</code> 可以直接监听数组的变化（如 <code>push</code>、<code>pop</code> 等方法），无需像 Vue 2 那样重写数组原型方法。</li><li><strong>更简洁的代码</strong>：无需递归遍历对象的所有属性，实现更高效。</li></ul><h4 id="基本用法示例" tabindex="-1"><a class="header-anchor" href="#基本用法示例"><span>基本用法示例</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Vue 3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> proxyData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 读取属性时触发</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">读取了 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 属性</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 修改属性时触发</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">修改了 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 属性，新值为 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 表示修改成功</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 读取属性：触发 get</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">proxyData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出：读取了 name 属性 → Vue 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 修改属性：触发 set</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">proxyData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出：修改了 age 属性，新值为 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="二、响应式系统的核心流程" tabindex="-1"><a class="header-anchor" href="#二、响应式系统的核心流程"><span>二、响应式系统的核心流程</span></a></h3><p>Vue 3 的响应式系统依然围绕 <strong>数据劫持 + 依赖收集 + 触发更新</strong> 三个步骤，但实现细节更优化。</p><h4 id="_1-数据劫持-proxy-代理对象" tabindex="-1"><a class="header-anchor" href="#_1-数据劫持-proxy-代理对象"><span>1. 数据劫持：Proxy 代理对象</span></a></h4><ul><li>Vue 3 会对组件的 <code>data</code>、<code>props</code> 等数据创建 <code>Proxy</code> 代理，当数据被访问或修改时，代理会触发对应的拦截方法（<code>get</code>/<code>set</code>）。</li><li>对于嵌套对象，Vue 3 会在 <code>get</code> 拦截时<strong>懒递归</strong>创建子对象的 Proxy（即只有当访问子属性时才会代理，提升初始化性能）。</li></ul><h4 id="_2-依赖收集-track-追踪依赖" tabindex="-1"><a class="header-anchor" href="#_2-依赖收集-track-追踪依赖"><span>2. 依赖收集：Track（追踪依赖）</span></a></h4><p>当数据被访问时（触发 <code>get</code> 拦截），Vue 3 会通过 <code>track</code> 函数收集依赖，记录“哪些组件/副作用依赖于这个数据”。</p><ul><li><strong>依赖的载体</strong>：Vue 3 中用 <code>Effect</code> 替代了 Vue 2 的 <code>Watcher</code>，每个组件的渲染函数、<code>watch</code> 监听、<code>computed</code> 计算属性等都会被包装成 <code>Effect</code>。</li><li><strong>依赖存储</strong>：依赖会被存储在一个 <code>targetMap</code> 结构中，键是被代理的对象，值是该对象所有属性的依赖集合（<code>depsMap</code>）。</li></ul><h4 id="_3-触发更新-trigger-触发依赖" tabindex="-1"><a class="header-anchor" href="#_3-触发更新-trigger-触发依赖"><span>3. 触发更新：Trigger（触发依赖）</span></a></h4><p>当数据被修改时（触发 <code>set</code> 拦截），Vue 3 会通过 <code>trigger</code> 函数通知所有依赖该数据的 <code>Effect</code> 执行（如重新渲染组件、执行 <code>watch</code> 回调等）。</p><h3 id="三、v-model-双向绑定的实现" tabindex="-1"><a class="header-anchor" href="#三、v-model-双向绑定的实现"><span>三、v-model 双向绑定的实现</span></a></h3><p>Vue 3 中 <code>v-model</code> 依然是“语法糖”，但用法和底层绑定逻辑有微调，核心是“数据 → 视图”和“视图 → 数据”的双向同步。</p><h4 id="_1-数据-→-视图的绑定" tabindex="-1"><a class="header-anchor" href="#_1-数据-→-视图的绑定"><span>1. 数据 → 视图的绑定</span></a></h4><ul><li>当数据变化时，通过 Proxy 的 <code>set</code> 拦截触发 <code>trigger</code>，通知组件的 <code>Effect</code>（渲染函数）重新执行，将新数据渲染到视图中（如输入框的 <code>value</code> 属性）。</li></ul><h4 id="_2-视图-→-数据的绑定" tabindex="-1"><a class="header-anchor" href="#_2-视图-→-数据的绑定"><span>2. 视图 → 数据的绑定</span></a></h4><ul><li><code>v-model</code> 会自动给表单元素绑定 <code>input</code> 事件（或其他事件，如复选框的 <code>change</code>），当用户操作视图（如输入内容）时，事件触发并调用回调函数，将视图中的新值同步到数据中（触发 Proxy 的 <code>set</code> 拦截）。</li></ul><h4 id="_3-vue-3-中-v-model-的变化" tabindex="-1"><a class="header-anchor" href="#_3-vue-3-中-v-model-的变化"><span>3. Vue 3 中 v-model 的变化</span></a></h4><ul><li>移除了 <code>.sync</code> 修饰符，统一用 <code>v-model:prop</code> 语法实现多个属性的双向绑定（如 <code>v-model:title</code>）。</li><li>对于自定义组件，<code>v-model</code> 的默认 prop 从 <code>value</code> 改为 <code>modelValue</code>，默认事件从 <code>input</code> 改为 <code>update:modelValue</code>，更直观。</li></ul><p><strong>示例：输入框双向绑定</strong></p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-vue"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> v-model</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello Vue 3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // ref 会通过 Proxy 包装成响应式数据</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>底层等价于：<div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-vue"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  :</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  @</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">input</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="四、与-vue-2-的核心区别" tabindex="-1"><a class="header-anchor" href="#四、与-vue-2-的核心区别"><span>四、与 Vue 2 的核心区别</span></a></h3><table><thead><tr><th>特性</th><th>Vue 2</th><th>Vue 3</th></tr></thead><tbody><tr><td>数据劫持方式</td><td><code>Object.defineProperty</code></td><td><code>Proxy</code></td></tr><tr><td>响应式数据范围</td><td>仅能监听已声明的属性</td><td>可监听新增/删除属性、数组变化</td></tr><tr><td>依赖收集时机</td><td>初始化时递归遍历所有属性</td><td>访问属性时懒递归代理</td></tr><tr><td>依赖载体</td><td><code>Watcher</code></td><td><code>Effect</code></td></tr><tr><td>v-model 底层事件</td><td>固定 <code>input</code> 事件 + <code>value</code> prop</td><td>可自定义事件（默认 <code>update:modelValue</code>）</td></tr></tbody></table><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Vue 3 双向绑定的核心是：</p><ol><li>用 <code>Proxy</code> 代理数据，实现更全面的劫持；</li><li>通过 <code>track</code> 收集依赖（<code>Effect</code>），<code>trigger</code> 触发依赖更新；</li><li><code>v-model</code> 语法糖封装了“数据→视图”和“视图→数据”的双向同步逻辑。</li></ol>`,33)]))}const p=i(n,[["render",h]]),d=JSON.parse('{"path":"/article/9nw00l1b/","title":"Vue是如何实现双向绑定的","lang":"zh-CN","frontmatter":{"title":"Vue是如何实现双向绑定的","createTime":"2025/06/24 15:04:03","permalink":"/article/9nw00l1b/","tags":["Vue","双向绑定"],"excerpt":"关于双向绑定，一直处于模糊状态，未来会反复打磨这篇文章，加深对双向绑定的理解！","description":"Vue 3 双向绑定的核心原理 Vue 3 依然遵循“数据驱动视图”的理念，但响应式系统的底层实现从 Object.defineProperty 改为了 Proxy，同时保留了依赖收集、Watcher 等核心机制，但流程上更高效。 一、响应式系统的底层：Proxy 代理 Vue 3 用 Proxy 替代 Object.defineProperty 实现...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue是如何实现双向绑定的\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-12T05:38:57.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/9nw00l1b/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"Vue是如何实现双向绑定的"}],["meta",{"property":"og:description","content":"Vue 3 双向绑定的核心原理 Vue 3 依然遵循“数据驱动视图”的理念，但响应式系统的底层实现从 Object.defineProperty 改为了 Proxy，同时保留了依赖收集、Watcher 等核心机制，但流程上更高效。 一、响应式系统的底层：Proxy 代理 Vue 3 用 Proxy 替代 Object.defineProperty 实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-12T05:38:57.000Z"}],["meta",{"property":"article:tag","content":"双向绑定"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:modified_time","content":"2025-07-12T05:38:57.000Z"}]]},"readingTime":{"minutes":4.13,"words":1240},"git":{"createdTime":1750753130000,"updatedTime":1752298737000,"contributors":[{"name":"221250108","username":"221250108","email":"221250108@smail.nju.edu.cn","commits":8,"avatar":"https://avatars.githubusercontent.com/221250108?v=4","url":"https://github.com/221250108"}]},"autoDesc":true,"filePathRelative":"Vue/Vue是如何实现双向绑定的.md","headers":[],"categoryList":[{"id":"2d8ec5","sort":10001,"name":"Vue"}]}');export{p as comp,d as data};

import{_ as e,c as p,a as h,b as a,e as t,d as i,w as r,r as k,o as d}from"./app--PEh7e-7.js";const g={};function y(c,s){const n=k("Badge"),l=k("RouteLink");return d(),p("div",null,[s[10]||(s[10]=h(`<p>在前端框架领域，Vue与React无疑是当下最主流的两大选择。它们都致力于解决“构建复杂交互界面”的核心问题，但在设计理念、语法风格、生态体系上又存在显著差异。本文将从“表层特征”到“深层逻辑”，系统梳理二者的联系与区别，帮助开发者更清晰地理解框架选型的底层逻辑。</p><h2 id="一、先看相似-同源的前端框架核心诉求" tabindex="-1"><a class="header-anchor" href="#一、先看相似-同源的前端框架核心诉求"><span>一、先看相似：同源的前端框架核心诉求</span></a></h2><p>Vue与React诞生于不同背景，但面对的前端开发痛点高度一致，因此在核心设计上有诸多共通之处。</p><h3 id="_1-解决的核心问题一致" tabindex="-1"><a class="header-anchor" href="#_1-解决的核心问题一致"><span>1. 解决的核心问题一致</span></a></h3><p>二者均针对传统DOM操作的痛点（如DOM操作繁琐、数据与视图同步困难、代码可维护性差），提出了“数据驱动视图”的解决方案：<strong>开发者只需关注数据变化，框架自动处理DOM更新</strong>，无需手动操作DOM。</p><p>例如实现“点击按钮更新文本”的简单功能，二者均通过“数据绑定”避免直接操作DOM：</p><ul><li>Vue（模板语法）：<div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-vue"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> @</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">click</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">点击</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{{ count }}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>React（JSX语法）：<div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)}&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">点击</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  )</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_2-核心技术理念相通" tabindex="-1"><a class="header-anchor" href="#_2-核心技术理念相通"><span>2. 核心技术理念相通</span></a></h3>`,8)),a("ul",null,[a("li",null,[t(n,{text:"组件化开发",type:"warning"}),s[0]||(s[0]=i("：均将页面拆分为独立、可复用的“组件”（如按钮组件、表单组件），组件内部封装逻辑与视图，通过props传递数据，实现代码复用与解耦。",-1))]),a("li",null,[t(n,{text:"虚拟DOM",type:"warning"}),s[2]||(s[2]=i("：均通过“虚拟DOM”（内存中的JS对象）描述真实DOM，当数据变化时，先对比虚拟DOM的差异（Diff算法），再批量更新真实DOM，减少DOM操作次数，提升性能。(详细介绍虚拟DOM：",-1)),t(l,{to:"/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%85%B3%E4%BA%8E%E8%99%9A%E6%8B%9FDOM.html"},{default:r(()=>s[1]||(s[1]=[i("点击跳转",-1)])),_:1,__:[1]}),s[3]||(s[3]=i(")",-1))]),a("li",null,[t(n,{text:"单向数据流",type:"warning"}),s[4]||(s[4]=i("：核心数据流均为“单向”（父组件向子组件传递数据，子组件不直接修改父组件数据），避免数据流向混乱，简化调试。",-1))]),a("li",null,[t(n,{text:"生命周期/副作用管理",type:"warning"}),s[5]||(s[5]=i("：均提供“生命周期”或“副作用”机制，处理组件的初始化、更新、销毁等时机的逻辑（如Vue的",-1)),s[6]||(s[6]=a("code",null,"onMounted",-1)),s[7]||(s[7]=i("、React的",-1)),s[8]||(s[8]=a("code",null,"useEffect",-1)),s[9]||(s[9]=i("）。",-1))])]),s[11]||(s[11]=h(`<h3 id="_3-生态目标一致" tabindex="-1"><a class="header-anchor" href="#_3-生态目标一致"><span>3. 生态目标一致</span></a></h3><p>二者均围绕“前端工程化”构建生态，提供路由（Vue Router/React Router）、状态管理（Pinia/Vuex、Redux/Zustand）、构建工具（Vite/Vue CLI、Create React App/Vite）等配套工具，覆盖从开发到部署的全流程。</p><h2 id="二、再看差异-从表层语法到深层设计的分野" tabindex="-1"><a class="header-anchor" href="#二、再看差异-从表层语法到深层设计的分野"><span>二、再看差异：从表层语法到深层设计的分野</span></a></h2><p>Vue与React的差异，本质是“设计理念”的不同：<strong>Vue追求“开箱即用的简洁性”，React追求“灵活的编程范式”</strong>。这种差异从表层的“语法风格”延伸到深层的“状态管理”“渲染机制”等核心逻辑。</p><h3 id="_1-表层差异-语法与开发体验" tabindex="-1"><a class="header-anchor" href="#_1-表层差异-语法与开发体验"><span>1. 表层差异：语法与开发体验</span></a></h3><p>这是开发者接触框架时最直观的感受差异，核心体现在“视图描述方式”与“API设计风格”上。</p><table><thead><tr><th>维度</th><th>Vue</th><th>React</th></tr></thead><tbody><tr><td><strong>视图描述</strong></td><td>采用“模板语法”（HTML为核心，嵌入Vue指令如<code>v-if</code>/<code>v-for</code>），贴近传统前端开发习惯。</td><td>采用“JSX语法”（JS与HTML融合），将视图视为“JS函数的返回值”，完全用JS控制视图。</td></tr><tr><td><strong>API风格</strong></td><td>提供“选项式API”（Options API）与“组合式API”（Composition API）两种选择：<br>- 选项式：按<code>data</code>/<code>methods</code>/<code>watch</code>分类逻辑，适合简单组件；<br>- 组合式：按功能逻辑组织代码，适合复杂组件。</td><td>以“函数式API”（Hooks）为核心，通过<code>useState</code>/<code>useEffect</code>等Hooks将逻辑封装在函数组件中，风格统一。</td></tr><tr><td><strong>响应式实现</strong></td><td>自动响应式：通过“Proxy/Object.defineProperty”劫持数据变化，数据更新时自动触发视图更新，开发者无需手动通知框架。</td><td>手动触发更新：通过<code>setState</code>/<code>useState</code>的更新函数“显式”通知框架数据变化，框架再执行更新。</td></tr><tr><td><strong>样式绑定</strong></td><td>内置<code>scoped</code>样式隔离，支持<code>style</code>/<code>class</code>动态绑定，提供<code>vue-loader</code>处理单文件组件样式。</td><td>需依赖第三方方案（如CSS Modules、Styled Components）实现样式隔离，JSX中直接写行内样式或引入CSS文件。</td></tr></tbody></table><p><strong>举例：实现条件渲染与列表渲染</strong></p><ul><li>Vue（模板语法，直观简洁）：<div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-vue"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- 条件渲染 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> v-if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">isShow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">显示文本</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- 列表渲染 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> v-for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> in</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{{ item.name }}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>React（JSX语法，JS逻辑与视图融合）：<div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> isShow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [{</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">A</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> },</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">B</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }]</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 条件渲染（JS逻辑） */</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">isShow</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">显示文本</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 列表渲染（JS map方法） */</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;)}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  )</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_2-中层差异-核心机制与功能实现" tabindex="-1"><a class="header-anchor" href="#_2-中层差异-核心机制与功能实现"><span>2. 中层差异：核心机制与功能实现</span></a></h3><h4 id="_1-响应式系统-自动-与-手动-的本质区别" tabindex="-1"><a class="header-anchor" href="#_1-响应式系统-自动-与-手动-的本质区别"><span>（1）响应式系统：“自动”与“手动”的本质区别</span></a></h4><p>响应式系统是框架的“心脏”，决定了“数据变化如何驱动视图更新”，二者的实现逻辑截然不同：</p><ul><li><p><strong>Vue：自动响应式（依赖追踪）</strong><br> Vue通过<code>Proxy</code>（Vue 3）劫持数据对象的<code>get</code>/<code>set</code>操作：</p><ol><li>组件渲染时，访问数据（如<code>{{ count }}</code>）会触发<code>get</code>，框架自动“追踪”该数据与组件的依赖关系；</li><li>当数据更新（如<code>count++</code>），触发<code>set</code>，框架自动“通知”所有依赖该数据的组件重新渲染。<br> 开发者无需关心“谁依赖了数据”“数据变化后要更新哪些组件”，框架全自动化处理。</li></ol></li><li><p><strong>React：手动触发更新（状态驱动）</strong><br> React没有“依赖追踪”，而是基于“状态更新”触发重新渲染：</p><ol><li>组件通过<code>useState</code>定义“状态”，初始渲染时执行函数组件，生成虚拟DOM；</li><li>当调用<code>setCount</code>更新状态时，框架标记组件为“待更新”，并重新执行函数组件，生成新的虚拟DOM；</li><li>通过Diff算法对比新旧虚拟DOM，更新差异部分。<br> 这里的关键是：<strong>状态更新会触发“整个组件”重新执行</strong>（而非仅依赖该状态的部分），开发者需通过<code>useMemo</code>/<code>useCallback</code>等Hooks优化不必要的重渲染。</li></ol></li></ul><h4 id="_2-组件复用-组合-与-混合-的选择" tabindex="-1"><a class="header-anchor" href="#_2-组件复用-组合-与-混合-的选择"><span>（2）组件复用：“组合”与“混合”的选择</span></a></h4><p>组件复用是框架灵活性的重要体现，二者的思路差异明显：</p><ul><li><p><strong>Vue：多样化复用方案</strong><br> Vue支持“组件组合”“混入（Mixin）”“自定义指令”等多种复用方式：</p><ul><li>优先推荐“组件组合”（通过props传递数据，子组件嵌套），符合单向数据流；</li><li>对于跨组件的通用逻辑（如埋点、权限判断），可使用“组合式API”封装为“Composables”（如<code>useAuth</code>、<code>useTrack</code>），复用逻辑更清晰（比Mixin更易追踪来源）。<br> 示例：封装“权限判断”Composable：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// useAuth.js</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useAuth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> isAuthorized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 模拟权限请求</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    isAuthorized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> isAuthorized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 在组件中使用</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">import </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useAuth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> from &#39;./useAuth&#39;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">const </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> isAuthorized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> = useAuth()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>React：“组合优于继承”，Hooks为核心</strong><br> React从设计理念上强调“组合优于继承”，不推荐使用类继承实现复用，而是通过：</p><ul><li>组件组合（如“高阶组件HOC”“渲染属性Render Props”）；</li><li>Hooks（React 16.8后成为主流）：将通用逻辑封装为自定义Hooks（如<code>useAuth</code>、<code>useRequest</code>），复用成本极低，且逻辑与组件耦合度低。<br> 示例：封装“权限判断”Hook：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// useAuth.js</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useEffect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useAuth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">isAuthorized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setIsAuthorized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  useEffect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 模拟权限请求</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setIsAuthorized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [])</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> isAuthorized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 在组件中使用</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> isAuthorized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useAuth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;&gt;{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">isAuthorized</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">有权限</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">无权限</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="_3-状态管理-内置简化-与-生态灵活" tabindex="-1"><a class="header-anchor" href="#_3-状态管理-内置简化-与-生态灵活"><span>（3）状态管理：“内置简化”与“生态灵活”</span></a></h4><p>对于跨组件共享的“全局状态”（如用户信息、主题配置），二者的处理思路不同：</p><ul><li><p><strong>Vue：内置方案，开箱即用</strong><br> Vue官方提供“Pinia”（Vue 3推荐）和“Vuex”（Vue 2主流）作为状态管理库，设计上贴合Vue的响应式系统，API简洁，开箱即用：</p><ul><li>无需额外配置，直接集成到Vue生态；</li><li>利用Vue的自动响应式，状态更新时自动触发组件渲染；<br> 示例（Pinia）：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// store/user.js</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> defineStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">pinia</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useUserStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">user</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">张三</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }),</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  actions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    updateName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">newName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">      this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> newName</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 在组件中使用</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">import </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useUserStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> from &#39;@/store/user&#39;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">const userStore = useUserStore()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">userStore.updateName(&#39;李四&#39;) // 直接更新状态，视图自动更新</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>React：无官方方案，生态丰富</strong><br> React官方不提供状态管理库，而是由社区主导生态，不同方案适配不同场景：</p><ul><li>简单场景：使用<code>useContext</code>+<code>useState</code>实现轻量全局状态；</li><li>复杂场景：使用Redux（成熟稳定，适合大型项目）、Zustand（轻量简洁，API类似Pinia）、Recoil（面向原子化状态）等；<br> 示例（Zustand）：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// store/user.js</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> create</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">zustand</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useUserStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> create</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">张三</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  updateName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">newName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> newName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}))</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 在组件中使用</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> updateName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useUserStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> updateName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">李四</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)}&gt;{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_3-深层差异-设计理念与适用场景" tabindex="-1"><a class="header-anchor" href="#_3-深层差异-设计理念与适用场景"><span>3. 深层差异：设计理念与适用场景</span></a></h3><p>表层与中层的差异，最终源于二者的“设计哲学”不同，这也决定了它们的适用场景侧重：</p><table><thead><tr><th>维度</th><th>Vue</th><th>React</th></tr></thead><tbody><tr><td><strong>设计哲学</strong></td><td>「渐进式框架」：核心功能（模板、响应式）简洁，按需引入进阶功能（路由、状态管理），学习曲线平缓，兼顾简单与复杂场景。</td><td>「灵活的编程范式」：以JSX和Hooks为核心，提供“最小API”，不限制具体实现方式，灵活性极高，允许开发者自定义解决方案。</td></tr><tr><td><strong>学习曲线</strong></td><td>低：模板语法贴近HTML，选项式API逻辑分类清晰，新手易上手；组合式API可逐步学习。</td><td>中高：JSX需适应“JS与HTML融合”，Hooks需理解“闭包”“依赖数组”等概念，新手易踩重渲染、依赖项遗漏等坑。</td></tr><tr><td><strong>团队协作</strong></td><td>规范清晰：模板语法、选项式API强制了一定的代码规范，团队协作时风格易统一。</td><td>依赖约定：灵活性高但缺乏强制规范，需团队制定统一的Hooks使用、状态管理约定，否则代码易混乱。</td></tr><tr><td><strong>适用场景</strong></td><td>中小项目、快速迭代场景（如后台管理系统、企业官网、移动端H5）；追求“开箱即用”“低学习成本”的团队。</td><td>大型复杂项目、定制化需求多的场景（如电商平台、社交应用、可视化大屏）；追求“技术灵活性”“深度定制”的团队（尤其前端强团队）。</td></tr><tr><td><strong>生态风格</strong></td><td>官方主导：核心工具（Vue Router、Pinia）由官方维护，风格统一，兼容性有保障。</td><td>社区主导：核心工具（路由、状态管理）由社区维护，方案多样，需自行评估选型。</td></tr></tbody></table><h2 id="三、框架选型-没有-最优-只有-最适配" tabindex="-1"><a class="header-anchor" href="#三、框架选型-没有-最优-只有-最适配"><span>三、框架选型：没有“最优”，只有“最适配”</span></a></h2><p>通过以上对比可见，Vue与React没有绝对的“优劣”，选型应基于<strong>项目规模、团队技术栈、需求复杂度</strong>三个核心因素：</p><h3 id="_1-选vue的典型场景" tabindex="-1"><a class="header-anchor" href="#_1-选vue的典型场景"><span>1. 选Vue的典型场景</span></a></h3><ul><li>项目周期短、需要快速上线（如创业项目、内部工具）；</li><li>团队以“非前端专项”开发者为主（如后端、全栈兼顾前端），需要低学习成本的框架；</li><li>需求相对标准化（如后台管理系统、内容展示型网站），无需深度定制框架能力。</li></ul><h3 id="_2-选react的典型场景" tabindex="-1"><a class="header-anchor" href="#_2-选react的典型场景"><span>2. 选React的典型场景</span></a></h3><ul><li>大型复杂项目（如用户量千万级的电商平台），需要高度灵活的技术方案支撑定制化需求；</li><li>团队以“专业前端”为主，有能力制定技术规范、驾驭框架灵活性；</li><li>需跨端复用代码（React Native可实现“一次开发，多端运行”，覆盖Web、iOS、Android）；</li><li>依赖丰富的社区生态（如需要使用成熟的可视化库、AI相关工具，React生态支持更完善）。</li></ul><h3 id="_3-趋势-逐渐-趋同-的框架发展" tabindex="-1"><a class="header-anchor" href="#_3-趋势-逐渐-趋同-的框架发展"><span>3. 趋势：逐渐“趋同”的框架发展</span></a></h3><p>值得注意的是，近年来Vue与React在发展中呈现“互相借鉴”的趋势：</p><ul><li>Vue 3引入“组合式API”，吸收了React Hooks的“逻辑组合”思想；</li><li>React 18引入“自动批处理更新”“并发渲染”，优化了手动更新的繁琐；</li><li>二者均支持Vite作为构建工具，提升开发体验；</li><li>均向“跨端”拓展（Vue有UniApp，React有React Native）。<br> 未来框架的差异可能会进一步缩小，核心竞争力将更多体现在“生态完善度”与“性能优化”上。</li></ul><h2 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结"><span>四、总结</span></a></h2><p>Vue与React作为前端框架的“双巨头”，本质是“不同设计理念下的殊途同归”——都以“提升前端开发效率”为目标，但Vue通过“简洁化、标准化”降低使用门槛，React通过“灵活性、可编程性”赋能复杂场景。</p><p>对于开发者而言，不必纠结于“哪个框架更好”，而应理解二者的设计逻辑：</p><ul><li>新手可从Vue入手，快速掌握“数据驱动视图”的核心思想；</li><li>进阶学习React，理解“函数式编程”“组件组合”的深层逻辑；</li><li>最终的核心竞争力不是“框架熟练度”，而是“前端基础能力”（JS/HTML/CSS、工程化、性能优化）——这些能力在任何框架中都是通用的。</li></ul>`,35))])}const A=e(g,[["render",y]]),u=JSON.parse('{"path":"/article/hode7dfb/","title":"Vue与React浅谈","lang":"zh-CN","frontmatter":{"title":"Vue与React浅谈","createTime":"2025/09/01 10:29:46","permalink":"/article/hode7dfb/","tags":["Vue","React"],"excerpt":"简单整理一下Vue与React的相似点和不同点","description":"在前端框架领域，Vue与React无疑是当下最主流的两大选择。它们都致力于解决“构建复杂交互界面”的核心问题，但在设计理念、语法风格、生态体系上又存在显著差异。本文将从“表层特征”到“深层逻辑”，系统梳理二者的联系与区别，帮助开发者更清晰地理解框架选型的底层逻辑。 一、先看相似：同源的前端框架核心诉求 Vue与React诞生于不同背景，但面对的前端开发...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue与React浅谈\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-01T02:49:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/hode7dfb/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"Vue与React浅谈"}],["meta",{"property":"og:description","content":"在前端框架领域，Vue与React无疑是当下最主流的两大选择。它们都致力于解决“构建复杂交互界面”的核心问题，但在设计理念、语法风格、生态体系上又存在显著差异。本文将从“表层特征”到“深层逻辑”，系统梳理二者的联系与区别，帮助开发者更清晰地理解框架选型的底层逻辑。 一、先看相似：同源的前端框架核心诉求 Vue与React诞生于不同背景，但面对的前端开发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T02:49:49.000Z"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:modified_time","content":"2025-09-01T02:49:49.000Z"}]]},"readingTime":{"minutes":11.24,"words":3373},"git":{"createdTime":1756694989000,"updatedTime":1756694989000,"contributors":[{"name":"ziqingchuan","username":"ziqingchuan","email":"221250108@smail.nju.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/ziqingchuan?v=4","url":"https://github.com/ziqingchuan"}]},"autoDesc":true,"filePathRelative":"Vue/Vue与React浅谈.md","headers":[],"categoryList":[{"id":"2d8ec5","sort":10003,"name":"Vue"}]}');export{A as comp,u as data};

import{_ as s,c as a,a as l,o as t}from"./app-B3oOL54o.js";const e={};function n(p,i){return t(),a("div",null,i[0]||(i[0]=[l(`<p>在现代前端开发中，构建工具是不可或缺的基础设施，它们负责代码转换、打包优化、开发服务器等核心工作。当前前端生态中，<strong>Webpack</strong> 作为老牌构建工具仍占据主流地位，而 <strong>Vite</strong> 凭借颠覆性的设计理念迅速崛起，成为许多新项目的首选。本文将从核心原理、开发体验、性能表现到适用场景，全面对比这两大构建工具的差异与优劣。</p><h2 id="一、核心原理-两种截然不同的设计思路" tabindex="-1"><a class="header-anchor" href="#一、核心原理-两种截然不同的设计思路"><span>一、核心原理：两种截然不同的设计思路</span></a></h2><p>构建工具的核心使命是将开发者编写的代码（如ES6+、TypeScript、JSX）转换为浏览器可识别的原生JavaScript，并处理资源依赖（CSS、图片等）。Vite和Webpack的根本差异，体现在对这一过程的实现方式上。</p><h3 id="_1-1-webpack-基于-打包-的构建模式" tabindex="-1"><a class="header-anchor" href="#_1-1-webpack-基于-打包-的构建模式"><span>1.1 Webpack：基于&quot;打包&quot;的构建模式</span></a></h3><p>Webpack诞生于前端模块化尚未普及的年代，其核心思想是 <strong>&quot;一切皆模块，最终打包成bundle&quot;</strong>：</p><ul><li><p><strong>工作流程</strong>：</p><ol><li>从入口文件开始，递归解析所有依赖（JS、CSS、图片等），构建出完整的依赖关系树。</li><li>通过Loader（如<code>babel-loader</code>转ES6、<code>css-loader</code>处理CSS）将非JS资源转换为模块。</li><li>通过Plugin（如HtmlWebpackPlugin生成HTML、TerserPlugin压缩代码）实现额外功能。</li><li>将所有模块打包合并成一个或多个bundle文件（通常是<code>main.js</code>、<code>chunk.js</code>等）。</li><li>开发环境下，Webpack会在内存中完成打包，再启动开发服务器提供服务。</li></ol></li><li><p><strong>核心特点</strong>：<mark class="note">无论开发还是生产环境，都必须先完成打包才能提供服务，这也是Webpack在大型项目中启动慢的根源</mark>。</p></li></ul><h3 id="_1-2-vite-基于-原生es模块-的构建模式" tabindex="-1"><a class="header-anchor" href="#_1-2-vite-基于-原生es模块-的构建模式"><span>1.2 Vite：基于&quot;原生ES模块&quot;的构建模式</span></a></h3><p>Vite（法语意为&quot;快速&quot;）是新生代构建工具，其设计基于现代浏览器对<strong>ES模块（ESM）的原生支持</strong>，彻底革新了开发阶段的构建方式：</p><ul><li><p><strong>工作流程</strong>：</p><ol><li><strong>开发环境</strong>： <ul><li>不预打包代码，而是将源码直接以ESM格式提供给浏览器。</li><li>浏览器请求某个模块时，Vite在服务端即时编译该模块（如用ESBuild转TS/JSX，PostCSS处理CSS）并返回。</li><li>依赖预构建：启动时将第三方依赖（如<code>node_modules</code>中的库）预打包成ESM格式，避免浏览器频繁请求细小文件。</li></ul></li><li><strong>生产环境</strong>： <ul><li>仍需打包（基于Rollup），但利用Rollup的Tree-shaking能力生成更精简的bundle。</li></ul></li></ol></li><li><p><strong>核心特点</strong>：<mark class="note">开发阶段&quot;按需编译&quot;，避免全量打包，实现毫秒级启动和热更新</mark>。</p></li></ul><h2 id="二、开发体验-效率与流畅度的差距" tabindex="-1"><a class="header-anchor" href="#二、开发体验-效率与流畅度的差距"><span>二、开发体验：效率与流畅度的差距</span></a></h2><p>开发体验是开发者选择构建工具的重要考量，而Vite和Webpack在这方面的差距尤为明显。</p><h3 id="_2-1-启动速度-vite的-瞬时启动-优势" tabindex="-1"><a class="header-anchor" href="#_2-1-启动速度-vite的-瞬时启动-优势"><span>2.1 启动速度：Vite的&quot;瞬时启动&quot;优势</span></a></h3><ul><li><p><strong>Webpack</strong>：</p><ul><li>启动时需要递归解析所有依赖并打包，项目越大（模块越多），启动时间越长。</li><li>大型项目启动可能需要数十秒甚至几分钟，严重影响开发效率。</li></ul></li><li><p><strong>Vite</strong>：</p><ul><li>开发环境无需打包，仅需启动服务器并预构建第三方依赖，启动时间通常在1-3秒内。</li><li><mark>项目规模对启动时间影响极小</mark>，即使是十万级模块的项目，启动依然迅速。</li></ul></li></ul><h3 id="_2-2-热更新速度-随改随见的流畅体验" tabindex="-1"><a class="header-anchor" href="#_2-2-热更新速度-随改随见的流畅体验"><span>2.2 热更新速度：随改随见的流畅体验</span></a></h3><p>热更新（HMR，Hot Module Replacement）指代码修改后无需刷新页面即可更新视图，是提升开发效率的关键功能。</p><ul><li><p><strong>Webpack</strong>：</p><ul><li>热更新时需重新打包修改的模块及其依赖，再将更新推送至浏览器。</li><li>模块依赖链越长，热更新耗时越久，大型项目可能需要几秒才能看到变化。</li></ul></li><li><p><strong>Vite</strong>：</p><ul><li>利用ESM的原生特性，修改某个模块后，仅需重新编译该模块并通知浏览器更新。</li><li>热更新时间通常在几十毫秒级别，<mark>几乎实现&quot;实时反馈&quot;</mark>。</li></ul></li></ul><h3 id="_2-3-配置复杂度-从繁琐到简洁" tabindex="-1"><a class="header-anchor" href="#_2-3-配置复杂度-从繁琐到简洁"><span>2.3 配置复杂度：从繁琐到简洁</span></a></h3><ul><li><p><strong>Webpack</strong>：</p><ul><li><strong>配置高度灵活但复杂</strong>，需要手动配置Loader、Plugin来处理不同类型的资源。</li><li>一个基础配置文件可能包含数百行代码，新手入门门槛高。</li><li>示例基础配置需涵盖入口、出口、Loader（JS/CSS/图片）、Plugin等：<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  entry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./src/index.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  output</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">__dirname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dist</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    rules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#BDA437;--shiki-dark:#E6CC77;">\\.</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">js</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">$</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">babel-loader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#BDA437;--shiki-dark:#E6CC77;">\\.</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">css</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">$</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">style-loader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">css-loader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> HtmlWebpackPlugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>Vite</strong>：</p><ul><li>内置了大多数常用场景的默认配置（如JSX、TypeScript、CSS、图片处理），零配置即可启动项目。</li><li>配置文件（<code>vite.config.js</code>）仅需覆盖特殊需求，代码量大幅减少：<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 仅需配置特殊需求，如代理、别名等</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  server</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/api</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http://localhost:3000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="三、性能与功能-生产构建的对比" tabindex="-1"><a class="header-anchor" href="#三、性能与功能-生产构建的对比"><span>三、性能与功能：生产构建的对比</span></a></h2><p>开发体验之外，生产环境的构建性能和产物质量同样重要。</p><h3 id="_3-1-生产构建性能" tabindex="-1"><a class="header-anchor" href="#_3-1-生产构建性能"><span>3.1 生产构建性能</span></a></h3><ul><li><p><strong>Webpack</strong>：</p><ul><li>依赖Terser等工具进行代码压缩，构建速度较慢，大型项目可能需要数分钟。</li><li>支持多进程打包（<code>thread-loader</code>），但配置复杂且提速有限。</li></ul></li><li><p><strong>Vite</strong>：</p><ul><li>生产构建基于Rollup，Rollup的Tree-shaking能力更强，打包效率更高。</li><li>依赖预构建和ESBuild（Go语言编写）处理代码转换，<mark>构建速度比Webpack快2-5倍</mark>。</li></ul></li></ul><h3 id="_3-2-产物体积与优化" tabindex="-1"><a class="header-anchor" href="#_3-2-产物体积与优化"><span>3.2 产物体积与优化</span></a></h3><ul><li><p><strong>Webpack</strong>：</p><ul><li>支持代码分割、Tree-shaking等优化，但默认配置下可能产生冗余代码。</li><li>需要手动配置<code>splitChunks</code>等选项优化产物，对新手不够友好。</li></ul></li><li><p><strong>Vite</strong>：</p><ul><li>基于Rollup的天然优势，<mark>Tree-shaking更彻底，产物体积通常比Webpack小5%-15%</mark>。</li><li>内置自动代码分割、预加载指令生成等优化，无需手动配置。</li></ul></li></ul><h3 id="_3-3-功能生态-成熟度与扩展性" tabindex="-1"><a class="header-anchor" href="#_3-3-功能生态-成熟度与扩展性"><span>3.3 功能生态：成熟度与扩展性</span></a></h3><ul><li><p><strong>Webpack</strong>：</p><ul><li><mark>生态极其成熟，支持几乎所有前端场景（如PWA、微前端、动态导入）</mark>。</li><li>社区提供了数万计的Loader和Plugin，几乎没有解决不了的问题。</li><li>缺点是部分老插件维护滞后，配置繁琐。</li></ul></li><li><p><strong>Vite</strong>：</p><ul><li>生态快速成长，核心场景（React/Vue/TS）支持完善，但边缘场景（如旧浏览器兼容）插件较少。</li><li>插件API设计更现代，开发插件更简单，但总量仍不及Webpack。</li><li>对旧浏览器（如IE）支持有限，需额外配置polyfill。</li></ul></li></ul><h2 id="四、适用场景-如何选择" tabindex="-1"><a class="header-anchor" href="#四、适用场景-如何选择"><span>四、适用场景：如何选择？</span></a></h2><p>没有绝对优秀的工具，只有最适合场景的工具。Vite和Webpack各有其最佳适用范围：</p><h3 id="_4-1-优先选择vite的场景" tabindex="-1"><a class="header-anchor" href="#_4-1-优先选择vite的场景"><span>4.1 优先选择Vite的场景</span></a></h3><ul><li><strong>中小型现代前端项目</strong>：如Vue 3、React 18项目，追求开发效率。</li><li><strong>对开发体验敏感的团队</strong>：频繁的热更新操作，需要即时反馈。</li><li><strong>使用ESM规范的新项目</strong>：无历史包袱，可充分利用Vite的原生ESM优势。</li><li><strong>需要快速迭代的产品</strong>：启动和热更新速度直接影响迭代效率。</li></ul><h3 id="_4-2-优先选择webpack的场景" tabindex="-1"><a class="header-anchor" href="#_4-2-优先选择webpack的场景"><span>4.2 优先选择Webpack的场景</span></a></h3><ul><li><strong>大型 legacy 项目</strong>：依赖大量旧模块或Webpack专属插件，迁移成本高。</li><li><strong>需要兼容旧浏览器（如IE）</strong>：Webpack对旧浏览器的支持更成熟。</li><li><strong>复杂定制化需求</strong>：如深度定制打包流程、集成特殊工具链。</li><li><strong>微前端架构中的应用</strong>：Webpack在微前端生态（如Module Federation）中支持更完善。</li></ul><h2 id="五、总结-构建工具的发展趋势" tabindex="-1"><a class="header-anchor" href="#五、总结-构建工具的发展趋势"><span>五、总结：构建工具的发展趋势</span></a></h2><p>Vite的崛起并非偶然，它代表了前端构建工具的发展方向——<strong>利用浏览器原生能力简化构建流程，将工具的复杂度隐藏在底层</strong>。而Webpack作为老牌工具，凭借成熟的生态和灵活性，仍将在复杂场景中发挥重要作用。</p><h3 id="关键结论" tabindex="-1"><a class="header-anchor" href="#关键结论"><span>关键结论：</span></a></h3><ul><li><strong>开发体验</strong>：Vite &gt; Webpack（启动快、热更新快、配置简单）。</li><li><strong>生产构建</strong>：Vite略优于Webpack（体积更小、速度更快）。</li><li><strong>生态成熟度</strong>：Webpack &gt; Vite（插件多、场景覆盖广）。</li><li><strong>学习成本</strong>：Vite &lt; Webpack（零配置起步，API更简洁）。</li></ul><p>对于新项目，建议优先尝试Vite，体验其带来的开发效率提升；对于复杂的旧项目，Webpack仍是更稳妥的选择。无论选择哪种工具，理解其核心原理（依赖解析、模块转换、打包优化）才是提升前端工程能力的关键。</p>`,37)]))}const k=s(e,[["render",n]]),r=JSON.parse('{"path":"/article/ytcm2cee/","title":"Vite和Webpack","lang":"zh-CN","frontmatter":{"title":"Vite和Webpack","createTime":"2025/07/12 15:38:58","permalink":"/article/ytcm2cee/","tags":["前端开发","Vite","Webpack"],"excerpt":"详细介绍Vite和Webpack的区别和优缺点","description":"在现代前端开发中，构建工具是不可或缺的基础设施，它们负责代码转换、打包优化、开发服务器等核心工作。当前前端生态中，Webpack 作为老牌构建工具仍占据主流地位，而 Vite 凭借颠覆性的设计理念迅速崛起，成为许多新项目的首选。本文将从核心原理、开发体验、性能表现到适用场景，全面对比这两大构建工具的差异与优劣。 一、核心原理：两种截然不同的设计思路 构...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vite和Webpack\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-12T11:41:17.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/ytcm2cee/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"Vite和Webpack"}],["meta",{"property":"og:description","content":"在现代前端开发中，构建工具是不可或缺的基础设施，它们负责代码转换、打包优化、开发服务器等核心工作。当前前端生态中，Webpack 作为老牌构建工具仍占据主流地位，而 Vite 凭借颠覆性的设计理念迅速崛起，成为许多新项目的首选。本文将从核心原理、开发体验、性能表现到适用场景，全面对比这两大构建工具的差异与优劣。 一、核心原理：两种截然不同的设计思路 构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-12T11:41:17.000Z"}],["meta",{"property":"article:tag","content":"Webpack"}],["meta",{"property":"article:tag","content":"Vite"}],["meta",{"property":"article:tag","content":"前端开发"}],["meta",{"property":"article:modified_time","content":"2025-07-12T11:41:17.000Z"}]]},"readingTime":{"minutes":7.08,"words":2124},"git":{"createdTime":1752320477000,"updatedTime":1752320477000,"contributors":[{"name":"221250108","username":"221250108","email":"221250108@smail.nju.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/221250108?v=4","url":"https://github.com/221250108"}]},"autoDesc":true,"filePathRelative":"前端开发/Vite和Webpack.md","headers":[],"categoryList":[{"id":"0ffed7","sort":10005,"name":"前端开发"}]}');export{k as comp,r as data};

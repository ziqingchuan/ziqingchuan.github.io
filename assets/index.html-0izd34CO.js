import{_ as i,c as a,a as n,o as t}from"./app-B6CTy4hf.js";const e={};function h(l,s){return t(),a("div",null,s[0]||(s[0]=[n(`<p>Vue 3 的生命周期依然描述了组件从<strong>创建到销毁</strong>的完整过程，但在钩子函数的命名、组合式 API 中的使用方式上与 Vue 2 有显著差异。本文将聚焦 Vue 3 生命周期的核心概念、钩子函数及实际应用。</p><h2 id="一、vue-3-生命周期的核心变化" tabindex="-1"><a class="header-anchor" href="#一、vue-3-生命周期的核心变化"><span>一、Vue 3 生命周期的核心变化</span></a></h2><p>Vue 3 保留了 Vue 2 生命周期的核心思想，但在 API 设计上更贴合组合式 API（<code>setup</code> 语法），同时移除了部分冗余钩子，新增了更灵活的钩子函数。</p><table><thead><tr><th><strong>变化类型</strong></th><th><strong>具体说明</strong></th></tr></thead><tbody><tr><td><strong>API 风格调整</strong></td><td>组合式 API 中通过 <code>onXxx</code> 函数注册生命周期钩子（如 <code>onMounted</code>），替代 Vue 2 的选项式钩子。</td></tr><tr><td><strong>钩子名称变化</strong></td><td>移除 <code>beforeCreate</code> 和 <code>created</code>，统一由 <code>setup</code> 替代；其他钩子前缀统一为 <code>on</code>（如 <code>onMounted</code>）。</td></tr><tr><td><strong>新增钩子</strong></td><td>增加 <code>onRenderTracked</code>、<code>onRenderTriggered</code> 等用于调试的钩子。</td></tr></tbody></table><h2 id="二、vue-3-生命周期阶段与钩子函数" tabindex="-1"><a class="header-anchor" href="#二、vue-3-生命周期阶段与钩子函数"><span>二、Vue 3 生命周期阶段与钩子函数</span></a></h2><p>Vue 3 的生命周期仍分为<strong>创建、挂载、更新、卸载</strong>四大阶段，每个阶段对应特定的钩子函数。以下是详细说明：</p><h3 id="_1-创建阶段-组件初始化" tabindex="-1"><a class="header-anchor" href="#_1-创建阶段-组件初始化"><span>1. 创建阶段：组件初始化</span></a></h3><p>组件实例被创建，响应式数据、方法等初始化完成。<br><strong>核心钩子：<code>setup</code></strong></p><ul><li><code>setup</code> 是组合式 API 的入口函数，替代了 Vue 2 的 <code>beforeCreate</code> 和 <code>created</code>。</li><li>执行时机：在组件实例初始化后、props 解析完成、数据和方法初始化前调用。</li><li>用途： <ul><li>初始化响应式数据（<code>ref</code>、<code>reactive</code>）。</li><li>定义方法、计算属性（<code>computed</code>）、监听器（<code>watch</code>）。</li><li>注册生命周期钩子（需在 <code>setup</code> 内调用 <code>onXxx</code> 函数）。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 示例：setup 中初始化数据并注册钩子</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 初始化响应式数据</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 注册挂载后钩子</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">组件已挂载</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 暴露数据给模板</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-挂载阶段-组件渲染到-dom" tabindex="-1"><a class="header-anchor" href="#_2-挂载阶段-组件渲染到-dom"><span>2. 挂载阶段：组件渲染到 DOM</span></a></h3><p>组件从模板编译到最终插入 DOM 的过程。<br><strong>核心钩子：</strong></p><ul><li><p><strong><code>onBeforeMount</code></strong></p><ul><li>执行时机：模板编译完成，但尚未挂载到 DOM 上。</li><li>特点：此时无法访问真实 DOM，模板仅存在于内存中。</li></ul></li><li><p><strong><code>onMounted</code></strong></p><ul><li>执行时机：组件已挂载到 DOM，真实 DOM 节点可用。</li><li>用途： <ul><li>执行依赖 DOM 的操作（如获取元素尺寸、初始化第三方库）。</li><li>发起异步请求（如接口数据获取）。</li><li>绑定 DOM 事件（如滚动、resize 事件）。</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onBeforeMount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onBeforeMount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">即将挂载，DOM 未生成</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">已挂载，DOM 可用：</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">app</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-更新阶段-数据变化触发重新渲染" tabindex="-1"><a class="header-anchor" href="#_3-更新阶段-数据变化触发重新渲染"><span>3. 更新阶段：数据变化触发重新渲染</span></a></h3><p>当组件的响应式数据变化时，触发视图更新的过程。<br><strong>核心钩子：</strong></p><ul><li><p><strong><code>onBeforeUpdate</code></strong></p><ul><li>执行时机：数据变化后，DOM 更新前调用。</li><li>用途：获取更新前的 DOM 状态（如旧数据对应的 DOM 结构）。</li></ul></li><li><p><strong><code>onUpdated</code></strong></p><ul><li>执行时机：DOM 已完成更新后调用。</li><li>用途： <ul><li>操作更新后的 DOM（如滚动到最新位置）。</li><li>避免在此时修改数据，否则可能触发无限更新循环。</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onBeforeUpdate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onUpdated</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onBeforeUpdate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">更新前的 count：</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 旧值</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onUpdated</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">更新后的 count：</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 新值</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-卸载阶段-组件从-dom-中移除" tabindex="-1"><a class="header-anchor" href="#_4-卸载阶段-组件从-dom-中移除"><span>4. 卸载阶段：组件从 DOM 中移除</span></a></h3><p>组件被销毁并清理资源的过程。<br><strong>核心钩子：</strong></p><ul><li><p><strong><code>onBeforeUnmount</code></strong></p><ul><li>执行时机：组件即将卸载，实例仍完全可用。</li><li>用途： <ul><li>清理资源（如清除定时器、取消接口请求）。</li><li>解绑全局事件（如 <code>window.scroll</code>）。</li><li>销毁第三方库实例（如图表、地图）。</li></ul></li></ul></li><li><p><strong><code>onUnmounted</code></strong></p><ul><li>执行时机：组件已完全卸载，DOM 节点被移除。</li><li>用途：确认资源已清理，执行卸载后的收尾操作（如日志记录）。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onBeforeUnmount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onUnmounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setInterval</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">计时中</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onBeforeUnmount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    clearInterval</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 清理定时器</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">组件即将卸载</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onUnmounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">组件已卸载，资源已清理</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-其他特殊钩子" tabindex="-1"><a class="header-anchor" href="#_5-其他特殊钩子"><span>5. 其他特殊钩子</span></a></h3><ul><li><p><strong><code>onErrorCaptured</code></strong><br> 捕获子组件抛出的错误，返回 <code>false</code> 可阻止错误继续传播。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">onErrorCaptured</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> instance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">捕获错误：</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 阻止错误冒泡</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>调试钩子</strong></p><ul><li><code>onRenderTracked</code>：跟踪渲染时依赖的收集情况（开发环境用）。</li><li><code>onRenderTriggered</code>：跟踪渲染触发的原因（开发环境用）。</li></ul></li></ul><h2 id="三、生命周期执行顺序示例" tabindex="-1"><a class="header-anchor" href="#三、生命周期执行顺序示例"><span>三、生命周期执行顺序示例</span></a></h2><p>以下是组件从创建到卸载的完整钩子执行顺序：</p><ol><li>setup（初始化数据和方法）</li><li>onBeforeMount（模板编译完成，未挂载）</li><li>onMounted（DOM 挂载完成）</li><li>（数据变化）</li><li>onBeforeUpdate（DOM 更新前）</li><li>onUpdated（DOM 更新后）</li><li>（组件卸载触发）</li><li>onBeforeUnmount（即将卸载，清理资源）</li><li>onUnmounted（完全卸载）</li></ol><h2 id="四、vue-2-与-vue-3-生命周期对比" tabindex="-1"><a class="header-anchor" href="#四、vue-2-与-vue-3-生命周期对比"><span>四、Vue 2 与 Vue 3 生命周期对比</span></a></h2><table><thead><tr><th><strong>Vue 2 选项式钩子</strong></th><th><strong>Vue 3 组合式钩子</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td><code>setup</code>（替代）</td><td>组件初始化阶段</td></tr><tr><td><code>created</code></td><td><code>setup</code>（替代）</td><td>数据和方法初始化完成</td></tr><tr><td><code>beforeMount</code></td><td><code>onBeforeMount</code></td><td>挂载前，模板编译完成</td></tr><tr><td><code>mounted</code></td><td><code>onMounted</code></td><td>挂载完成，DOM 可用</td></tr><tr><td><code>beforeUpdate</code></td><td><code>onBeforeUpdate</code></td><td>数据更新，DOM 未更新</td></tr><tr><td><code>updated</code></td><td><code>onUpdated</code></td><td>DOM 已更新</td></tr><tr><td><code>beforeDestroy</code></td><td><code>onBeforeUnmount</code></td><td>组件即将卸载，清理资源</td></tr><tr><td><code>destroyed</code></td><td><code>onUnmounted</code></td><td>组件已卸载</td></tr></tbody></table><h2 id="五、常见应用场景" tabindex="-1"><a class="header-anchor" href="#五、常见应用场景"><span>五、常见应用场景</span></a></h2><ol><li><strong>数据获取</strong>：在 <code>onMounted</code> 中发起接口请求（确保 DOM 准备就绪）。</li><li><strong>DOM 操作</strong>：在 <code>onMounted</code> 中初始化依赖 DOM 的插件（如 ECharts）。</li><li><strong>资源清理</strong>：在 <code>onBeforeUnmount</code> 中清除定时器、解绑事件，避免内存泄漏。</li><li><strong>错误处理</strong>：用 <code>onErrorCaptured</code> 统一捕获子组件错误，提升用户体验。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Vue 3 生命周期通过组合式 API 的 <code>onXxx</code> 钩子函数，提供了更灵活的组件生命周期管理方式。核心是理解<strong>创建、挂载、更新、卸载</strong>四大阶段的钩子时机，合理利用钩子函数处理数据初始化、DOM 操作和资源清理，从而编写高效、可维护的 Vue 组件。</p><p><strong>关键点回顾</strong>：</p><ul><li><code>setup</code> 替代了 Vue 2 的初始化钩子，是组合式 API 的入口。</li><li>挂载后操作 DOM 用 <code>onMounted</code>，更新后操作 DOM 用 <code>onUpdated</code>。</li><li>卸载前必须清理资源（定时器、事件），避免内存泄漏。</li></ul>`,35)]))}const p=i(e,[["render",h]]),d=JSON.parse('{"path":"/article/l0oy48ls/","title":"Vue的生命周期","lang":"zh-CN","frontmatter":{"title":"Vue的生命周期","createTime":"2025/06/24 15:00:43","permalink":"/article/l0oy48ls/","tags":["Vue","生命周期"],"excerpt":"还是只会用onMounted()吗？好好思考一下 Vue 的生命周期吧！","description":"Vue 3 的生命周期依然描述了组件从创建到销毁的完整过程，但在钩子函数的命名、组合式 API 中的使用方式上与 Vue 2 有显著差异。本文将聚焦 Vue 3 生命周期的核心概念、钩子函数及实际应用。 一、Vue 3 生命周期的核心变化 Vue 3 保留了 Vue 2 生命周期的核心思想，但在 API 设计上更贴合组合式 API（setup 语法），...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue的生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-12T05:38:57.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/l0oy48ls/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"Vue的生命周期"}],["meta",{"property":"og:description","content":"Vue 3 的生命周期依然描述了组件从创建到销毁的完整过程，但在钩子函数的命名、组合式 API 中的使用方式上与 Vue 2 有显著差异。本文将聚焦 Vue 3 生命周期的核心概念、钩子函数及实际应用。 一、Vue 3 生命周期的核心变化 Vue 3 保留了 Vue 2 生命周期的核心思想，但在 API 设计上更贴合组合式 API（setup 语法），..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-12T05:38:57.000Z"}],["meta",{"property":"article:tag","content":"生命周期"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:modified_time","content":"2025-07-12T05:38:57.000Z"}]]},"readingTime":{"minutes":5.19,"words":1557},"git":{"createdTime":1750760943000,"updatedTime":1752298737000,"contributors":[{"name":"221250108","username":"221250108","email":"221250108@smail.nju.edu.cn","commits":7,"avatar":"https://avatars.githubusercontent.com/221250108?v=4","url":"https://github.com/221250108"}]},"autoDesc":true,"filePathRelative":"Vue/Vue的生命周期.md","headers":[],"categoryList":[{"id":"2d8ec5","sort":10003,"name":"Vue"}]}');export{p as comp,d as data};

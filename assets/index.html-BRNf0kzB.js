import{_ as t,c as l,a as i,e as n,r as e,o as h}from"./app-By3oDRsv.js";const p={};function k(r,s){const a=e("Mermaid");return h(),l("div",null,[s[0]||(s[0]=i('<p>JavaScript 的事件系统是前端开发的核心基础，包括<strong>事件循环机制</strong>（控制代码执行顺序）和<strong>事件传播机制</strong>（控制交互事件的流动）。本文将用清晰的语言和图示，彻底讲透这两大机制的执行逻辑。</p><h2 id="一、javascript-事件循环-代码执行的-调度中心" tabindex="-1"><a class="header-anchor" href="#一、javascript-事件循环-代码执行的-调度中心"><span>一、JavaScript 事件循环：代码执行的&quot;调度中心&quot;</span></a></h2><p>JavaScript 是单线程语言，一次只能执行一个任务。为了处理异步操作（如网络请求、定时器等），浏览器设计了<strong>事件循环（Event Loop）</strong> 机制来调度代码执行顺序。</p><h3 id="_1-1-核心概念-任务队列与执行规则" tabindex="-1"><a class="header-anchor" href="#_1-1-核心概念-任务队列与执行规则"><span>1.1 核心概念：任务队列与执行规则</span></a></h3><p>事件循环的核心是将任务分为两类，按优先级依次执行：</p><ul><li><p><strong>宏任务（Macrotask）</strong>：优先级较低的任务，包括</p><ul><li>整体脚本代码（初始执行的代码）</li><li><code>setTimeout</code>/<code>setInterval</code> 回调</li><li>DOM 事件回调（如点击、输入）</li><li>I/O 操作（如网络请求、文件读取）</li></ul></li><li><p><strong>微任务（Microtask）</strong>：优先级较高的任务，包括</p><ul><li><code>Promise.then</code>/<code>catch</code>/<code>finally</code> 回调</li><li><code>queueMicrotask</code> 注册的任务</li><li><code>MutationObserver</code>（DOM 变化监听）</li></ul></li></ul><h3 id="_1-2-事件循环的执行流程" tabindex="-1"><a class="header-anchor" href="#_1-2-事件循环的执行流程"><span>1.2 事件循环的执行流程</span></a></h3><p>事件循环按照&quot;<strong>先微后宏，一次一清</strong>&quot;的规则反复执行，具体步骤如下：</p><ol><li><strong>执行初始宏任务</strong>：首先执行当前的宏任务（通常是整个脚本代码）。</li><li><strong>清空微任务队列</strong>：当前宏任务执行完毕后，立即执行所有微任务，直到微任务队列为空。</li><li><strong>UI 渲染（可选）</strong>：浏览器可能在此时进行页面渲染（非必选，由浏览器决定时机）。</li><li><strong>循环执行</strong>：从宏任务队列中取出下一个宏任务，重复步骤 1-3。</li></ol><h4 id="执行顺序图示" tabindex="-1"><a class="header-anchor" href="#执行顺序图示"><span>执行顺序图示</span></a></h4>',10)),n(a,{id:"mermaid-97",code:"eJxLL0osyFAIceFSAALH6Kd7Gp4u745V0NW1U3CKfta5/MXCnqd7Jz/t7H26rv/J7t1PuxbGgpU6gZU4Vz/dtw4i/HLG/Kcd05/NWP90wrInO3Y9X7nLvhas0hmksgYoWqPgAjXxyY6GJztWwbVCTHSBmIikB2hYjYJr9NP+9S8bOq0UQj2f7dj0bP5kiHJXsHK3ari7cDrADeEAJyQBsOnu0c/Xdj7d1/ps2gZkt7hDAoALAF1yhJo="}),s[1]||(s[1]=i(`<h3 id="_1-3-经典执行顺序示例解析" tabindex="-1"><a class="header-anchor" href="#_1-3-经典执行顺序示例解析"><span>1.3 经典执行顺序示例解析</span></a></h3><p>以下代码的输出顺序是理解事件循环的关键：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1. 同步代码开始</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">4. setTimeout宏任务</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3. Promise微任务</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2. 同步代码结束</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>执行步骤拆解</strong>：</p><ol><li>执行同步代码（宏任务），输出 <code>1. 同步代码开始</code> 和 <code>2. 同步代码结束</code>。</li><li>当前宏任务执行完毕，检查微任务队列，发现 <code>Promise.then</code> 回调，执行并输出 <code>3. Promise微任务</code>。</li><li>微任务队列清空，从宏任务队列取出 <code>setTimeout</code> 回调，执行并输出 <code>4. setTimeout宏任务</code>。</li></ol><p><strong>输出顺序</strong>：<code>1 → 2 → 3 → 4</code></p><p>复杂一些的例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> async1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">async1 start</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    await</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> async2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">async1 end</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> async2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">async2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">script start</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">setTimeout</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">async1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">promise1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">promise2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">script end</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>执行步骤拆解</strong>：</p><ol><li><p>执行同步代码（宏任务）：</p><ul><li>输出 &#39;script start&#39;</li><li>调用 async1()，输出 &#39;async1 start&#39;</li><li>执行 await async2()，输出 &#39;async2&#39;，将 async1 剩余代码放入微任务队列</li><li>执行 Promise 构造函数，输出 &#39;promise1&#39;，将 then 回调放入微任务队列</li><li>输出 &#39;script end&#39;</li></ul></li><li><p>执行微任务队列：</p><ul><li>执行 async1 剩余代码，输出 &#39;async1 end&#39;</li><li>执行 Promise then 回调，输出 &#39;promise2&#39;</li></ul></li><li><p>执行宏任务队列：</p><ul><li>执行 setTimeout 回调，输出 &#39;setTimeout&#39;</li></ul></li></ol><p><strong>输出顺序</strong>：</p><p><code>script start → async1 start → async2 → promise1 → script end → async1 end → promise2 → setTimeout</code></p><h2 id="二、dom-事件传播-交互事件的-流动路径" tabindex="-1"><a class="header-anchor" href="#二、dom-事件传播-交互事件的-流动路径"><span>二、DOM 事件传播：交互事件的&quot;流动路径&quot;</span></a></h2><p>当用户点击按钮、输入文本等交互操作发生时，事件并非只在目标元素上触发，而是会经历一个<strong>从外层到内层再回到外层</strong>的传播过程，这就是事件传播机制。</p><h3 id="_2-1-事件传播的三个阶段" tabindex="-1"><a class="header-anchor" href="#_2-1-事件传播的三个阶段"><span>2.1 事件传播的三个阶段</span></a></h3><p>事件传播分为三个依次执行的阶段，如同&quot;投石入水&quot;的涟漪效应：</p><ol><li><p><strong>捕获阶段（Capture Phase）</strong></p><ul><li>事件从最外层的 <code>window</code> 开始，<strong>由外到内</strong>向目标元素传播。</li><li>路径：<code>window → document → html → body → ... → 目标元素的父级</code>。</li><li>只有通过 <code>addEventListener(..., { capture: true })</code> 注册的监听器才会在这个阶段触发。</li></ul></li><li><p><strong>目标阶段（Target Phase）</strong></p><ul><li>事件到达实际触发的目标元素本身。</li><li>无论是否设置捕获，目标元素上的所有监听器都会在此阶段触发（顺序由注册顺序决定）。</li></ul></li><li><p><strong>冒泡阶段（Bubble Phase）</strong></p><ul><li>事件从目标元素<strong>由内到外</strong>向最外层传播，与捕获阶段路径相反。</li><li>路径：<code>目标元素 → 父级 → ... → body → html → document → window</code>。</li><li>默认情况下（<code>addEventListener</code> 未设置 <code>capture</code>），监听器在此阶段触发。</li></ul></li></ol><h4 id="传播阶段图示" tabindex="-1"><a class="header-anchor" href="#传播阶段图示"><span>传播阶段图示</span></a></h4>`,18)),n(a,{id:"mermaid-282",code:"eJxLL0osyFAIceFSAALH6PLMvJT88lgFXV27mme9U1/0ba9RcIpOyU8uzU3NK4kFq3JCkXWOzijJzYHIOKPIuEQn5adUQmRcUGRco593bHva2vx8ywKItCuKtFv089nrni1oR1bhBlYBEX85Y9uzdVuB6pBknrZNerZ5IdBoJPNgYhDPQZwAE3NGcjBMzAnJezAxRy4AVRBxug=="}),s[2]||(s[2]=i('<h3 id="_2-2-事件传播的控制方法" tabindex="-1"><a class="header-anchor" href="#_2-2-事件传播的控制方法"><span>2.2 事件传播的控制方法</span></a></h3><p>可以通过事件对象的方法控制传播流程：</p><ul><li><strong><code>e.stopPropagation()</code></strong>：阻止事件继续传播到下一个阶段或元素（但当前元素的其他监听器仍会执行）。</li><li><strong><code>e.stopImmediatePropagation()</code></strong>：立即阻止事件传播，且当前元素的其他监听器也不会执行。</li><li><strong><code>e.preventDefault()</code></strong>：仅阻止事件的默认行为（如链接跳转、表单提交），不影响传播流程。</li></ul><h2 id="三、事件委托-高效利用事件传播" tabindex="-1"><a class="header-anchor" href="#三、事件委托-高效利用事件传播"><span>三、事件委托：高效利用事件传播</span></a></h2><p>事件委托是基于冒泡阶段的经典优化技巧，核心思想是&quot;<strong>父元素代理子元素的事件监听</strong>&quot;。</p><h3 id="_3-1-事件委托的原理" tabindex="-1"><a class="header-anchor" href="#_3-1-事件委托的原理"><span>3.1 事件委托的原理</span></a></h3><p>由于事件会冒泡到父元素，因此无需为每个子元素单独注册监听器，只需在父元素上注册一次，即可通过判断事件的目标元素（<code>e.target</code>）来处理所有子元素的事件。</p><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h4><ul><li><strong>性能优化</strong>：减少监听器数量（1 个父元素监听器替代 N 个子元素监听器）。</li><li><strong>动态兼容</strong>：新增子元素无需重新注册监听器，自动继承事件处理。</li></ul><h2 id="四、总结-关键知识点梳理" tabindex="-1"><a class="header-anchor" href="#四、总结-关键知识点梳理"><span>四、总结：关键知识点梳理</span></a></h2><ol><li><p><strong>事件循环</strong>决定代码执行顺序：</p><ul><li>先执行同步代码（宏任务），再清空所有微任务，最后执行下一个宏任务。</li><li>微任务优先级高于宏任务，同一轮循环中微任务会全部执行完毕。</li></ul></li><li><p><strong>事件传播</strong>决定交互事件流动：</p><ul><li>经历捕获（外→内）→ 目标（元素本身）→ 冒泡（内→外）三个阶段。</li><li>默认监听器在冒泡阶段触发，可通过 <code>capture: true</code> 改为捕获阶段。</li></ul></li><li><p><strong>实践技巧</strong>：</p><ul><li>用事件委托优化大量子元素的事件监听。</li><li>用 <code>stopPropagation</code> 控制事件传播范围，避免不必要的触发。</li></ul></li></ol>',11))])}const o=t(p,[["render",k]]),g=JSON.parse('{"path":"/article/2wul1j44/","title":"js中的事件机制","lang":"zh-CN","frontmatter":{"title":"js中的事件机制","createTime":"2025/07/08 17:08:35","permalink":"/article/2wul1j44/","tags":["JavaScript","事件"],"excerpt":"JavaScript 事件系统深度解析：事件循环、事件委托与传播机制","description":"JavaScript 的事件系统是前端开发的核心基础，包括事件循环机制（控制代码执行顺序）和事件传播机制（控制交互事件的流动）。本文将用清晰的语言和图示，彻底讲透这两大机制的执行逻辑。 一、JavaScript 事件循环：代码执行的\\"调度中心\\" JavaScript 是单线程语言，一次只能执行一个任务。为了处理异步操作（如网络请求、定时器等），浏览器设...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js中的事件机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-18T10:31:47.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/2wul1j44/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"js中的事件机制"}],["meta",{"property":"og:description","content":"JavaScript 的事件系统是前端开发的核心基础，包括事件循环机制（控制代码执行顺序）和事件传播机制（控制交互事件的流动）。本文将用清晰的语言和图示，彻底讲透这两大机制的执行逻辑。 一、JavaScript 事件循环：代码执行的\\"调度中心\\" JavaScript 是单线程语言，一次只能执行一个任务。为了处理异步操作（如网络请求、定时器等），浏览器设..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T10:31:47.000Z"}],["meta",{"property":"article:tag","content":"事件"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:modified_time","content":"2025-08-18T10:31:47.000Z"}]]},"readingTime":{"minutes":5.74,"words":1721},"git":{"createdTime":1751966810000,"updatedTime":1755513107000,"contributors":[{"name":"221250108","username":"221250108","email":"221250108@smail.nju.edu.cn","commits":2,"avatar":"https://avatars.githubusercontent.com/221250108?v=4","url":"https://github.com/221250108"},{"name":"ziqingchuan","username":"ziqingchuan","email":"221250108@smail.nju.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/ziqingchuan?v=4","url":"https://github.com/ziqingchuan"}]},"autoDesc":true,"filePathRelative":"JavaScript/js中的事件机制.md","headers":[],"categoryList":[{"id":"686155","sort":10001,"name":"JavaScript"}]}');export{o as comp,g as data};

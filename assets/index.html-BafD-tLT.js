import{_ as r,c as n,a,o}from"./app-DbujQvcw.js";const e={};function s(i,t){return o(),n("div",null,t[0]||(t[0]=[a('<p>在计算机网络的分层模型中，传输层是连接应用层与网络层的关键纽带，而<strong>TCP（传输控制协议）</strong> 和<strong>UDP（用户数据报协议）</strong> 则是该层最核心的两个协议。它们分别以&quot;可靠&quot;和&quot;高效&quot;为设计目标，支撑着不同类型的网络应用。本文将从协议特性、工作原理、核心差异到实际应用场景，全面解析这两大协议。</p><h2 id="一、tcp-面向连接的可靠传输协议" tabindex="-1"><a class="header-anchor" href="#一、tcp-面向连接的可靠传输协议"><span>一、TCP：面向连接的可靠传输协议</span></a></h2><div class="hint-container tip"><p class="hint-container-title">TCP</p><p>TCP 是一种<strong>面向连接、可靠、有序</strong>的传输层协议，其设计初衷是确保数据能够完整、准确地从发送方传递到接收方，哪怕网络环境不稳定。</p></div><h3 id="_1-1-tcp的核心特性" tabindex="-1"><a class="header-anchor" href="#_1-1-tcp的核心特性"><span>1.1 TCP的核心特性</span></a></h3><ul><li><strong>面向连接</strong>：通信前必须建立连接（三次握手），通信结束后需断开连接（四次挥手），类似&quot;打电话&quot;的流程。</li><li><strong>可靠传输</strong>：通过一系列机制保证数据不丢失、不重复、不乱序，具体包括： <ul><li><strong>确认机制</strong>：接收方收到数据后必须发送确认（ACK），发送方未收到确认则重传。</li><li><strong>超时重传</strong>：发送方若在规定时间内未收到确认，自动重传数据。</li><li><strong>流量控制</strong>：通过滑动窗口机制，控制发送速率，避免接收方缓冲区溢出。</li><li><strong>拥塞控制</strong>：根据网络拥堵情况动态调整发送速率，减少网络负担。</li></ul></li><li><strong>有序传输</strong>：数据按发送顺序到达接收方，通过序列号（Sequence Number）实现。</li><li><strong>面向字节流</strong>：将数据视为连续的字节流，不保留消息边界（需应用层自行处理）。</li></ul><h3 id="_1-2-tcp的连接管理-三次握手与四次挥手" tabindex="-1"><a class="header-anchor" href="#_1-2-tcp的连接管理-三次握手与四次挥手"><span>1.2 TCP的连接管理：三次握手与四次挥手</span></a></h3><p>TCP 的&quot;面向连接&quot;特性体现在严格的连接建立和断开流程中：</p><h4 id="三次握手-建立连接" tabindex="-1"><a class="header-anchor" href="#三次握手-建立连接"><span><mark class="note">三次握手（建立连接）</mark></span></a></h4><ol><li>客户端发送 <strong>SYN（同步）</strong> 报文，请求建立连接，并携带初始序列号（seq=x）。</li><li>服务器收到 SYN 后，回复 <strong>SYN+ACK（同步+确认）</strong> 报文，确认客户端请求（ack=x+1），并携带自己的初始序列号（seq=y）。</li><li>客户端收到回复后，发送 <strong>ACK（确认）</strong> 报文，确认服务器的序列号（ack=y+1），连接正式建立。</li></ol><h4 id="四次挥手-断开连接" tabindex="-1"><a class="header-anchor" href="#四次挥手-断开连接"><span><mark class="note">四次挥手（断开连接）</mark></span></a></h4><ol><li>客户端发送 <strong>FIN（结束）</strong> 报文，通知服务器要断开连接。</li><li>服务器收到 FIN 后，发送 <strong>ACK</strong> 报文确认（此时服务器可能仍有数据要发送，连接处于&quot;半关闭&quot;状态）。</li><li>服务器数据发送完毕后，发送 <strong>FIN</strong> 报文，通知客户端可以断开连接。</li><li>客户端收到 FIN 后，发送 <strong>ACK</strong> 报文确认，等待一段时间（确保服务器收到确认）后关闭连接；服务器收到 ACK 后立即关闭连接。</li></ol><h3 id="_1-3-tcp的适用场景" tabindex="-1"><a class="header-anchor" href="#_1-3-tcp的适用场景"><span>1.3 TCP的适用场景</span></a></h3><p>TCP 因可靠性优势，<em><strong>适用于对数据准确性要求高、允许一定延迟的场景</strong></em>：</p><ul><li><strong>网页浏览（HTTP/HTTPS）</strong>：需完整接收HTML、CSS等资源，否则页面显示异常。</li><li><strong>文件传输（FTP）</strong>：文件不能丢失或损坏，否则无法正常打开。</li><li><strong>邮件发送（SMTP）</strong>：邮件内容需完整送达，不能遗漏。</li><li><strong>远程登录（SSH）</strong>：命令执行和结果返回需准确对应，否则操作出错。</li></ul><h2 id="二、udp-无连接的高效传输协议" tabindex="-1"><a class="header-anchor" href="#二、udp-无连接的高效传输协议"><span>二、UDP：无连接的高效传输协议</span></a></h2><div class="hint-container tip"><p class="hint-container-title">UDP</p><p>UDP 是一种<strong>无连接、不可靠、无序</strong>的传输层协议，它摒弃了 TCP 的复杂可靠性机制，以最小的开销实现数据传输，追求<strong>速度和实时性</strong>。</p></div><h3 id="_2-1-udp的核心特性" tabindex="-1"><a class="header-anchor" href="#_2-1-udp的核心特性"><span>2.1 UDP的核心特性</span></a></h3><ul><li><strong>无连接</strong>：通信前无需建立连接，发送方直接向目标地址发送数据，类似&quot;写信&quot;的流程。</li><li><strong>不可靠传输</strong>：不保证数据的到达，没有确认、重传机制，数据可能丢失、重复或乱序。</li><li><strong>无流量控制和拥塞控制</strong>：发送方按自己的速率发送数据，不考虑接收方和网络状态。</li><li><strong>面向数据报</strong>：数据以&quot;数据报&quot;为单位传输，保留消息边界（每个数据报独立处理）。</li><li><strong>开销小、速度快</strong>：头部仅8字节（远小于TCP的20-60字节），协议处理简单，延迟低。</li></ul><h3 id="_2-2-udp的工作原理" tabindex="-1"><a class="header-anchor" href="#_2-2-udp的工作原理"><span>2.2 UDP的工作原理</span></a></h3><p>UDP 的工作流程非常简单：</p><ol><li>应用层将数据传递给 UDP，UDP 给数据添加一个简单的头部（包含源端口、目标端口、数据长度、校验和）。</li><li>UDP 将数据报交给网络层（IP协议），由IP负责将数据报发送到目标主机。</li><li>目标主机的 UDP 收到数据报后，检查校验和（验证数据是否损坏），若无误则交给对应端口的应用程序；若损坏则直接丢弃，不通知发送方。</li></ol><p>由于没有连接管理和可靠性机制，<strong>UDP 的处理效率远高于 TCP，但也无法保证数据的交付</strong>。</p><h3 id="_2-3-udp的适用场景" tabindex="-1"><a class="header-anchor" href="#_2-3-udp的适用场景"><span>2.3 UDP的适用场景</span></a></h3><p>UDP 因高效性和实时性优势，<em><strong>适用于对延迟敏感、可容忍少量数据丢失的场景</strong></em>：</p><ul><li><strong>实时音视频传输（如视频通话、直播）</strong>：少量数据丢失只会导致短暂花屏或杂音，不影响整体体验，但若延迟过高则无法正常交流。</li><li><strong>在线游戏</strong>：玩家操作指令需实时传递，延迟比偶尔的指令丢失更影响体验。</li><li><strong>物联网通信（如传感器数据上报）</strong>：设备资源有限，且少量数据丢失可通过后续重传弥补。</li><li><strong>广播/组播</strong>：向多个目标同时发送数据（TCP仅支持点对点通信）。</li></ul><h2 id="三、tcp与udp的核心差异对比" tabindex="-1"><a class="header-anchor" href="#三、tcp与udp的核心差异对比"><span>三、TCP与UDP的核心差异对比</span></a></h2><table><thead><tr><th>特性</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接性</td><td>面向连接（三次握手建立连接）</td><td>无连接（直接发送数据）</td></tr><tr><td>可靠性</td><td>可靠（确认、重传、有序）</td><td>不可靠（无确认、可能丢失/乱序）</td></tr><tr><td>传输单位</td><td>字节流（无消息边界）</td><td>数据报（有消息边界）</td></tr><tr><td>头部大小</td><td>20-60字节</td><td>8字节</td></tr><tr><td>流量控制</td><td>有（滑动窗口）</td><td>无</td></tr><tr><td>拥塞控制</td><td>有</td><td>无</td></tr><tr><td>适用场景</td><td>对准确性要求高（文件、网页、邮件）</td><td>对实时性要求高（音视频、游戏、物联网）</td></tr><tr><td>延迟</td><td>较高（机制复杂）</td><td>较低（处理简单）</td></tr><tr><td>吞吐量</td><td>受拥塞控制影响，稳定性好</td><td>无限制，可能因网络拥堵下降</td></tr></tbody></table><h2 id="四、总结-如何选择tcp与udp" tabindex="-1"><a class="header-anchor" href="#四、总结-如何选择tcp与udp"><span>四、总结：如何选择TCP与UDP？</span></a></h2><p>TCP 和 UDP 没有绝对的优劣，选择的核心在于<strong>应用场景的需求</strong>：</p><ul><li>若需要<strong>数据完整、准确</strong>（如文件传输、金融交易），即使牺牲一些速度和延迟，也应选择 TCP。</li><li>若需要<strong>低延迟、高实时性</strong>（如实时音视频、游戏），且可容忍少量数据丢失，应选择 UDP。</li></ul><p>在实际应用中，两者也可能结合使用。例如，视频会议中，音视频流用 UDP 保证实时性，而控制信令（如静音、切换镜头）用 TCP 保证可靠性。</p><p>理解 TCP 与 UDP 的差异，不仅能帮助我们更好地选择协议，更能深入理解网络应用的设计思路——<strong>所有技术的选择，都是对需求的权衡与适配</strong>。</p>',32)]))}const l=r(e,[["render",s]]),p=JSON.parse('{"path":"/article/w8ktpgtz/","title":"TCP与UDP","lang":"zh-CN","frontmatter":{"title":"TCP与UDP","createTime":"2025/07/12 12:05:52","permalink":"/article/w8ktpgtz/","tags":["TCP","UDP"],"excerpt":"详细介绍关于TCP与UDP的核心特性、工作原理、核心差异、应用场景。","description":"在计算机网络的分层模型中，传输层是连接应用层与网络层的关键纽带，而TCP（传输控制协议） 和UDP（用户数据报协议） 则是该层最核心的两个协议。它们分别以\\"可靠\\"和\\"高效\\"为设计目标，支撑着不同类型的网络应用。本文将从协议特性、工作原理、核心差异到实际应用场景，全面解析这两大协议。 一、TCP：面向连接的可靠传输协议 TCP TCP 是一种面向连接、可...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TCP与UDP\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-12T11:41:17.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/w8ktpgtz/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"TCP与UDP"}],["meta",{"property":"og:description","content":"在计算机网络的分层模型中，传输层是连接应用层与网络层的关键纽带，而TCP（传输控制协议） 和UDP（用户数据报协议） 则是该层最核心的两个协议。它们分别以\\"可靠\\"和\\"高效\\"为设计目标，支撑着不同类型的网络应用。本文将从协议特性、工作原理、核心差异到实际应用场景，全面解析这两大协议。 一、TCP：面向连接的可靠传输协议 TCP TCP 是一种面向连接、可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-12T11:41:17.000Z"}],["meta",{"property":"article:tag","content":"UDP"}],["meta",{"property":"article:tag","content":"TCP"}],["meta",{"property":"article:modified_time","content":"2025-07-12T11:41:17.000Z"}]]},"readingTime":{"minutes":6.21,"words":1864},"git":{"createdTime":1752298737000,"updatedTime":1752320477000,"contributors":[{"name":"221250108","username":"221250108","email":"221250108@smail.nju.edu.cn","commits":2,"avatar":"https://avatars.githubusercontent.com/221250108?v=4","url":"https://github.com/221250108"}]},"autoDesc":true,"filePathRelative":"HTTP/TCP与UDP.md","headers":[],"categoryList":[{"id":"293c9e","sort":10004,"name":"HTTP"}]}');export{l as comp,p as data};

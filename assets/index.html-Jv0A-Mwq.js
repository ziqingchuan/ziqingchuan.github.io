import{_ as d,c as a,a as r,b as t,d as n,e as l,r as s,o as i}from"./app-CgpLV6eU.js";const u={};function p(c,e){const o=s("Badge");return i(),a("div",null,[e[12]||(e[12]=r('<h2 id="什么是生命周期" tabindex="-1"><a class="header-anchor" href="#什么是生命周期"><span>什么是生命周期？</span></a></h2><p>Vue 的生命周期是指从 <strong>创建一个 Vue 实例</strong> 到 <strong>实例被销毁</strong> 的整个过程。在这个过程中，Vue 提供了多个生命周期钩子函数，开发者可以在这些函数中执行特定的逻辑，比如数据获取、DOM 操作、事件绑定等。</p><h2 id="vue-生命周期的主要阶段" tabindex="-1"><a class="header-anchor" href="#vue-生命周期的主要阶段"><span>Vue 生命周期的主要阶段</span></a></h2><h3 id="_1-创建阶段" tabindex="-1"><a class="header-anchor" href="#_1-创建阶段"><span>1. <strong>创建阶段</strong></span></a></h3><p>组件实例被创建，但尚未挂载到 DOM 上。在这个阶段，组件的响应式数据和事件监听器会被初始化，但还未涉及 DOM 的操作。</p><h4 id="对应的生命周期钩子" tabindex="-1"><a class="header-anchor" href="#对应的生命周期钩子"><span>对应的生命周期钩子：</span></a></h4>',6)),t("ul",null,[e[3]||(e[3]=r('<li><p><strong><code>beforeCreate</code></strong></p><ul><li>这是生命周期的第一个钩子函数，组件实例刚刚被初始化，数据和事件尚未设置。</li><li>在这个阶段访问 <code>data</code>、<code>props</code> 或 <code>methods</code> 都是<mark class="note">无效的</mark>。</li></ul></li>',1)),t("li",null,[e[2]||(e[2]=t("p",null,[t("strong",null,[t("code",null,"created")])],-1)),t("ul",null,[e[1]||(e[1]=t("li",null,[t("p",null,[n("响应式数据和事件监听器已经被初始化，但"),t("mark",{class:"note"},"组件还未挂载到 DOM"),n("。")])],-1)),t("li",null,[e[0]||(e[0]=t("p",null,"通常在这个阶段用于：",-1)),l(o,{text:"初始化数据",type:"tip"}),l(o,{text:"获取异步数据",type:"warning"}),l(o,{text:"设置定时器",type:"danger"})])])])]),e[13]||(e[13]=t("blockquote",null,[t("p",null,[n("💡 "),t("strong",null,"提示"),n("：此阶段无法访问 DOM，因此不要在此阶段进行 DOM 操作。")])],-1)),e[14]||(e[14]=t("h3",{id:"_2-挂载阶段",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2-挂载阶段"},[t("span",null,[n("2. "),t("strong",null,"挂载阶段")])])],-1)),e[15]||(e[15]=t("p",null,"组件已经准备好挂载到 DOM 上，但还未完成实际的渲染。",-1)),e[16]||(e[16]=t("h4",{id:"对应的生命周期钩子-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#对应的生命周期钩子-1"},[t("span",null,"对应的生命周期钩子：")])],-1)),t("ul",null,[e[7]||(e[7]=t("li",null,[t("p",null,[t("strong",null,[t("code",null,"beforeMount")])]),t("ul",null,[t("li",null,[n("挂载动作即将开始，"),t("mark",{class:"note"},"模板已编译完成，但还未插入 DOM"),n("。")]),t("li",null,"此时仍无法访问真实的 DOM。")])],-1)),t("li",null,[e[6]||(e[6]=t("p",null,[t("strong",null,[t("code",null,"mounted")])],-1)),t("ul",null,[e[5]||(e[5]=t("li",null,[t("p",null,[n("组件已经挂载完成，DOM 已经生成，"),t("mark",{class:"note"},"可以在此阶段操作 DOM"),n("。")])],-1)),t("li",null,[e[4]||(e[4]=t("p",null,"常见用途：",-1)),l(o,{text:"执行依赖 DOM 的操作",type:"tip"}),l(o,{text:"绑定第三方插件（如图表库）",type:"warning"})])])])]),e[17]||(e[17]=r('<blockquote><p>⚠️ <strong>注意</strong>：虽然可以在 <code>mounted</code> 中操作 DOM，但最好避免复杂的业务逻辑，这可能导致性能问题。</p></blockquote><h3 id="_3-更新阶段" tabindex="-1"><a class="header-anchor" href="#_3-更新阶段"><span>3. <strong>更新阶段</strong></span></a></h3><p>当组件的数据或属性发生变化时，组件会重新渲染并更新 DOM。</p><h4 id="对应的生命周期钩子-2" tabindex="-1"><a class="header-anchor" href="#对应的生命周期钩子-2"><span>对应的生命周期钩子：</span></a></h4><ul><li><p><strong><code>beforeUpdate</code></strong></p><ul><li>数据发生变化，组件即将重新渲染。</li><li>此时，DOM 仍然是旧的状态。</li></ul></li><li><p><strong><code>updated</code></strong></p><ul><li>组件完成重新渲染，DOM 已更新。</li><li>此时可以操作更新后的 DOM，但应避免在此钩子中再次触发状态改变，避免死循环。</li></ul></li></ul><blockquote><p>⚠️ <strong>提示</strong>：尽量避免频繁的 DOM 操作，并将逻辑分离到其他函数中。</p></blockquote><h3 id="_4-销毁阶段" tabindex="-1"><a class="header-anchor" href="#_4-销毁阶段"><span>4. <strong>销毁阶段</strong></span></a></h3><p>组件被销毁，实例中的所有绑定和事件监听器都会被移除。</p><h4 id="对应的生命周期钩子-3" tabindex="-1"><a class="header-anchor" href="#对应的生命周期钩子-3"><span>对应的生命周期钩子：</span></a></h4>',9)),t("ul",null,[t("li",null,[e[10]||(e[10]=t("p",null,[t("strong",null,[t("code",null,"beforeDestroy")])],-1)),t("ul",null,[e[9]||(e[9]=t("li",null,[t("p",null,[n("组件即将销毁，"),t("mark",{class:"note"},"实例仍然可用"),n("。")])],-1)),t("li",null,[e[8]||(e[8]=t("p",null,"常用操作：",-1)),l(o,{text:"清除定时器",type:"danger"}),l(o,{text:"解绑事件监听器",type:"warning"})])])]),e[11]||(e[11]=t("li",null,[t("p",null,[t("strong",null,[t("code",null,"destroyed")])]),t("ul",null,[t("li",null,"组件已经被销毁，所有资源和事件监听器都被清理。"),t("li",null,"此阶段无法访问组件实例的任何属性。")])],-1))]),e[18]||(e[18]=r('<h2 id="vue-生命周期钩子函数总览" tabindex="-1"><a class="header-anchor" href="#vue-生命周期钩子函数总览"><span>Vue 生命周期钩子函数总览</span></a></h2><p>以下是 Vue 生命周期钩子函数的顺序和作用：</p><table><thead><tr><th>阶段</th><th>钩子函数</th><th>描述</th></tr></thead><tbody><tr><td><strong>创建阶段</strong></td><td><code>beforeCreate</code></td><td>实例初始化完成，尚未设置数据和事件。</td></tr><tr><td></td><td><code>created</code></td><td>数据和事件已初始化，但未挂载 DOM。</td></tr><tr><td><strong>挂载阶段</strong></td><td><code>beforeMount</code></td><td>模板已编译完成，尚未插入 DOM。</td></tr><tr><td></td><td><code>mounted</code></td><td>DOM 已插入，可进行 DOM 操作。</td></tr><tr><td><strong>更新阶段</strong></td><td><code>beforeUpdate</code></td><td>数据变化，组件即将重新渲染。</td></tr><tr><td></td><td><code>updated</code></td><td>组件完成重新渲染，DOM 已更新。</td></tr><tr><td><strong>销毁阶段</strong></td><td><code>beforeDestroy</code></td><td>组件即将销毁，仍可访问实例。</td></tr><tr><td></td><td><code>destroyed</code></td><td>组件已销毁，绑定事件和资源已清理。</td></tr></tbody></table><h2 id="生命周期的常见应用场景" tabindex="-1"><a class="header-anchor" href="#生命周期的常见应用场景"><span>生命周期的常见应用场景</span></a></h2><h3 id="_1-数据获取" tabindex="-1"><a class="header-anchor" href="#_1-数据获取"><span>1. <strong>数据获取</strong></span></a></h3><ul><li><strong>推荐阶段</strong>：<code>created</code> 或 <code>mounted</code><br> 在 <code>created</code> 中获取数据可以确保在挂载之前完成初始化，而在 <code>mounted</code> 中获取数据则可以确保组件已经渲染到页面。</li></ul><h3 id="_2-dom-操作" tabindex="-1"><a class="header-anchor" href="#_2-dom-操作"><span>2. <strong>DOM 操作</strong></span></a></h3><ul><li><strong>推荐阶段</strong>：<code>mounted</code><br> 在 <code>mounted</code> 中操作 DOM 是安全的，因为此时 DOM 已经完成挂载。</li></ul><h3 id="_3-事件监听" tabindex="-1"><a class="header-anchor" href="#_3-事件监听"><span>3. <strong>事件监听</strong></span></a></h3><ul><li><strong>推荐阶段</strong>：<code>mounted</code>（绑定）和 <code>beforeDestroy</code>（解绑）<br> 在组件销毁前解绑事件监听器以防止内存泄漏。</li></ul><h3 id="_4-定时器清理" tabindex="-1"><a class="header-anchor" href="#_4-定时器清理"><span>4. <strong>定时器清理</strong></span></a></h3><ul><li><strong>推荐阶段</strong>：<code>beforeDestroy</code><br> 在组件销毁前清理定时器，避免无效的任务占用资源。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Vue 的生命周期贯穿了组件的整个运行过程，从创建、挂载到更新和销毁。合理地利用生命周期钩子函数，可以帮助开发者更高效地编写业务逻辑，同时避免资源浪费和性能问题。</p><h3 id="关键点回顾" tabindex="-1"><a class="header-anchor" href="#关键点回顾"><span><strong>关键点回顾</strong></span></a></h3><ol><li><strong>创建阶段</strong>：初始化数据和事件监听。</li><li><strong>挂载阶段</strong>：访问 DOM，执行依赖 DOM 的逻辑。</li><li><strong>更新阶段</strong>：响应数据变化，避免频繁的 DOM 操作。</li><li><strong>销毁阶段</strong>：清理资源，移除事件监听器和定时器。</li></ol>',16))])}const h=d(u,[["render",p]]),m=JSON.parse('{"path":"/article/l0oy48ls/","title":"🐳Vue的生命周期","lang":"zh-CN","frontmatter":{"title":"🐳Vue的生命周期","createTime":"2025/06/24 15:00:43","permalink":"/article/l0oy48ls/","tags":["Vue","生命周期"],"excerpt":"还是只会用onMounted()吗？好好思考一下 Vue 的生命周期吧！","description":"什么是生命周期？ Vue 的生命周期是指从 创建一个 Vue 实例 到 实例被销毁 的整个过程。在这个过程中，Vue 提供了多个生命周期钩子函数，开发者可以在这些函数中执行特定的逻辑，比如数据获取、DOM 操作、事件绑定等。 Vue 生命周期的主要阶段 1. 创建阶段 组件实例被创建，但尚未挂载到 DOM 上。在这个阶段，组件的响应式数据和事件监听器会...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🐳Vue的生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-25T14:47:52.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/l0oy48ls/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"🐳Vue的生命周期"}],["meta",{"property":"og:description","content":"什么是生命周期？ Vue 的生命周期是指从 创建一个 Vue 实例 到 实例被销毁 的整个过程。在这个过程中，Vue 提供了多个生命周期钩子函数，开发者可以在这些函数中执行特定的逻辑，比如数据获取、DOM 操作、事件绑定等。 Vue 生命周期的主要阶段 1. 创建阶段 组件实例被创建，但尚未挂载到 DOM 上。在这个阶段，组件的响应式数据和事件监听器会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-25T14:47:52.000Z"}],["meta",{"property":"article:tag","content":"生命周期"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:modified_time","content":"2025-06-25T14:47:52.000Z"}]]},"readingTime":{"minutes":4.1,"words":1229},"git":{"createdTime":1750760943000,"updatedTime":1750862872000,"contributors":[{"name":"221250108","username":"221250108","email":"221250108@smail.nju.edu.cn","commits":4,"avatar":"https://avatars.githubusercontent.com/221250108?v=4","url":"https://github.com/221250108"}]},"autoDesc":true,"filePathRelative":"Vue/Vue的生命周期.md","headers":[],"categoryList":[{"id":"2d8ec5","sort":10001,"name":"Vue"}]}');export{h as comp,m as data};

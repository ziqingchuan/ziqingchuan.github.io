import{_ as r,c as p,a as h,b as n,e as i,d as s,w as g,r as e,o as d}from"./app-B45Goy4V.js";const o={};function k(c,a){const l=e("RouteLink"),t=e("Badge");return d(),p("div",null,[a[8]||(a[8]=h(`<h1 id="langchain-大语言模型应用开发框架详解" tabindex="-1"><a class="header-anchor" href="#langchain-大语言模型应用开发框架详解"><span>LangChain：大语言模型应用开发框架详解</span></a></h1><h2 id="_1-什么是langchain" tabindex="-1"><a class="header-anchor" href="#_1-什么是langchain"><span>1 什么是LangChain？</span></a></h2><p>LangChain是一个开源的Python框架，专为简化基于大语言模型（LLM）的应用程序开发而设计。它由Lang.AI（语言人工智能）开发，最初于2022年10月作为开源项目发布，并迅速在GitHub上获得广泛关注。LangChain的核心目标是解决将LLM集成到实际应用中面临的诸多挑战，如对话管理、上下文关联、长期记忆维护等，为开发者提供一套完整的解决方案。</p><p>LangChain作为一个链接面向用户程序和LLM之间的中间层框架，可以轻松管理与语言模型的交互，将多个组件链接在一起，并集成额外的资源，例如API和数据库。</p><p>其名称中的&quot;Chain&quot;强调了其核心设计理念：通过<mark>链式调用</mark>将多个组件组合成复杂的工作流程。</p><h2 id="_2-langchain的核心组件" tabindex="-1"><a class="header-anchor" href="#_2-langchain的核心组件"><span>2 LangChain的核心组件</span></a></h2><p>LangChain提供了六个核心模块，为构建LLM应用程序提供了全面支持：</p><h3 id="_2-1-模型输入-输出-model-i-o" tabindex="-1"><a class="header-anchor" href="#_2-1-模型输入-输出-model-i-o"><span>2.1 模型输入/输出（Model I/O）</span></a></h3><ul><li><strong>语言模型</strong>：提供了与各种LLM交互的标准接口，包括纯文本模型（LLM）和聊天模型（ChatModel）。</li><li><strong>提示模板</strong>：用于生成提示的预定义配方，包括字符串提示模板（PromptTemplate）和聊天提示模板（ChatPromptTemplate）。</li><li><strong>输出解析器</strong>：用于格式化语言模型返回的结果，确保输出为结构化数据。</li></ul><h3 id="_2-2-数据连接-data-connection" tabindex="-1"><a class="header-anchor" href="#_2-2-数据连接-data-connection"><span>2.2 数据连接（Data Connection）</span></a></h3><ul><li><strong>文档加载器</strong>：从不同数据源（如文本文件、网页、视频转录）加载非结构化文本为文档对象。</li><li><strong>文档转换器</strong>：对加载的文档进行转换处理，如文本拆分、冗余过滤、元数据提取等。</li><li><strong>文本嵌入模型</strong>：将文本转换为向量表示，用于语义搜索和相似度计算。</li><li><strong>向量存储</strong>：存储嵌入数据并执行向量搜索。</li><li><strong>检索器</strong>：响应非结构化查询并返回相关文档的接口。</li></ul><h3 id="_2-3-链-chains" tabindex="-1"><a class="header-anchor" href="#_2-3-链-chains"><span>2.3 链（Chains）</span></a></h3><p>Chain是LangChain的核心机制，采用<mark>管道-过滤器（Pipe-Filter）架构</mark>，通过面向对象函数调用或LCEL（LangChain Expression Language）以声明式语法将多个功能组件串联为可复用的工作流。</p><p>其核心运行逻辑是：<mark>以串行化数据流方式传递处理结果，前一环节的输出自动作为下一环节的输入，最终完成复杂任务的端到端执行</mark>。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 一个简单的链示例</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> langchain </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Chain</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Agent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 定义一个简单的Chain</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">simple_chain </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Chain</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">task</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">获取用户输入</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">task</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">处理输入</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">task</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">生成回答</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 定义一个Agent</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">simple_agent </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Agent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">chain</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">simple_chain</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 执行Agent</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">response </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> simple_agent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">execute</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-4-记忆-memory" tabindex="-1"><a class="header-anchor" href="#_2-4-记忆-memory"><span>2.4 记忆（Memory）</span></a></h3><p>用于在链的多次运行之间持久化应用程序状态，<mark>确保上下文的连贯性</mark>。Memory模块在复杂对话或任务处理过程中保存中间结果和上下文信息，确保系统能够准确理解用户意图并给出恰当回应。</p><h3 id="_2-5-代理-agents" tabindex="-1"><a class="header-anchor" href="#_2-5-代理-agents"><span>2.5 代理（Agents）</span></a></h3><p>代理是更为高级和自主的实体，<mark>负责管理和执行Chain</mark>。代理可以决定何时、如何以及以何种顺序执行Chain中的各个步骤，基于一组规则或策略模拟决策过程。LangChain提供了标准接口、多种可选代理和端到端代理示例。</p><h3 id="_2-6-回调-callbacks" tabindex="-1"><a class="header-anchor" href="#_2-6-回调-callbacks"><span>2.6 回调（Callbacks）</span></a></h3><p>用于<mark>扩展模型的推理能力，支持复杂应用的调用序列</mark>。回调机制支持日志记录、监控追踪等扩展功能，如StdOutCallbackHandler。</p><h2 id="_3-langchain的核心概念" tabindex="-1"><a class="header-anchor" href="#_3-langchain的核心概念"><span>3 LangChain的核心概念</span></a></h2><h3 id="_3-1-langchain-expression-language-lcel" tabindex="-1"><a class="header-anchor" href="#_3-1-langchain-expression-language-lcel"><span>3.1 LangChain Expression Language (LCEL)</span></a></h3><p>LCEL是一种声明式语言，用于组合链和组件。它使用<code>|</code>运算符将不同组件连接起来，形成复杂的工作流程。LCEL提供了通用调用接口、重试、回退、模式和运行时可配置性等内置实用程序。</p><h3 id="_3-2-检索增强生成-rag" tabindex="-1"><a class="header-anchor" href="#_3-2-检索增强生成-rag"><span>3.2 检索增强生成（RAG）</span></a></h3><p>RAG（Retrieval-Augmented Generation）是一种创新架构，巧妙地整合了从庞大知识库中检索到的相关信息，以指导LLM生成更为精准的答案。RAG的工作流程包括四个阶段：</p><ol><li><strong>数据处理</strong>：收集和预处理相关数据。</li><li><strong>检索阶段</strong>：从知识库中检索与用户查询相关的信息。</li><li><strong>增强阶段</strong>：将检索到的信息与用户输入结合，为模型提供丰富的上下文。</li><li><strong>生成阶段</strong>：基于增强的信息，使用LLM生成最终回答或内容。</li></ol>`,27)),n("p",null,[a[1]||(a[1]=i("详细了解RAG相关内容：")),s(l,{to:"/AI/%E6%B5%85%E8%B0%88RAG%E5%BA%94%E7%94%A8.html"},{default:g(()=>a[0]||(a[0]=[i("点击跳转")])),_:1,__:[0]})]),a[9]||(a[9]=n("p",null,"RAG解决了LLM面临的几个主要问题：信息偏差/幻觉、知识更新滞后性、内容不可追溯、领域专业知识能力欠缺、推理能力限制、应用场景适应性受限和长文本处理能力较弱。",-1)),a[10]||(a[10]=n("h2",{id:"_4-langchain的架构与包结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-langchain的架构与包结构"},[n("span",null,"4 LangChain的架构与包结构")])],-1)),a[11]||(a[11]=n("p",null,"LangChain作为一个框架由多个包组成：",-1)),n("ul",null,[n("li",null,[s(t,{text:"langchain-core",type:"tip"}),a[2]||(a[2]=i("：包含不同组件的基本抽象以及将它们组合在一起的方法。这里定义了LLM、向量存储、检索器等核心组件的接口。"))]),n("li",null,[s(t,{text:"langchain-community",type:"tip"}),a[3]||(a[3]=i("：包含由社区维护的第三方集成。此包中的所有依赖项都是可选的，以保持包尽可能轻量级。"))]),n("li",null,[s(t,{text:"langchain",type:"tip"}),a[4]||(a[4]=i("：包含构成应用程序认知架构的链、代理和检索策略。这些不是第三方集成，而是在所有集成中通用的。"))]),n("li",null,[s(t,{text:"langgraph",type:"tip"}),a[5]||(a[5]=i("：langchain的扩展，旨在通过将步骤建模为图中的边和节点，使用LLM构建健壮且有状态的多参与者应用程序。"))]),n("li",null,[s(t,{text:"LangServe",type:"tip"}),a[6]||(a[6]=i("：将LangChain链部署为REST API的包。"))]),n("li",null,[s(t,{text:"LangSmith",type:"tip"}),a[7]||(a[7]=i("：一个开发人员平台，用于调试、测试、评估和监控LLM应用程序。"))])]),a[12]||(a[12]=h('<h2 id="_5-langchain的应用场景" tabindex="-1"><a class="header-anchor" href="#_5-langchain的应用场景"><span>5 LangChain的应用场景</span></a></h2><p>LangChain可以应用于多个场景，包括但不限于：</p><ol><li><strong>文档分析和摘要</strong>：利用LangChain的上下文感知和推理能力，对大量文档进行自动分析和摘要，提取关键信息。</li><li><strong>聊天机器人</strong>：构建具有自然语言处理能力的聊天机器人，能够理解复杂的对话上下文，并生成恰当的回应。</li><li><strong>智能助手与自动化</strong>：在办公、教育、医疗等领域构建智能助手，帮助用户自动化处理日常任务。</li><li><strong>代码生成与辅助编程</strong>：通过理解和分析开发人员的意图和需求，生成高质量的代码片段、优化代码结构、提供编程建议等。</li><li><strong>问答系统</strong>：基于特定文档的问答，使LLM能够根据提供的文档内容回答问题。</li></ol><h2 id="_6-langchain的优缺点" tabindex="-1"><a class="header-anchor" href="#_6-langchain的优缺点"><span>6 LangChain的优缺点</span></a></h2><h3 id="_6-1-优点" tabindex="-1"><a class="header-anchor" href="#_6-1-优点"><span>6.1 优点</span></a></h3><ul><li><strong>快速原型制作</strong>：支持快速制作原型，使开发人员能够快速测试和迭代想法。</li><li><strong>灵活性</strong>：具有高度可定制性，适用于各种大型语言模型应用。</li><li><strong>开源</strong>：LangChain是开源的，免费使用，并且有一个活跃的社区为开发做贡献。</li><li><strong>模块化设计</strong>：提供了一套模块化的构建块和组件，便于集成到第三方服务中，帮助开发者快速构建应用程序。</li></ul><h3 id="_6-2-缺点" tabindex="-1"><a class="header-anchor" href="#_6-2-缺点"><span>6.2 缺点</span></a></h3><ul><li><strong>可扩展性有限</strong>：并未设计用于大规模生产环境，因此不太适合复杂且高流量的应用程序。</li><li><strong>调试挑战</strong>：由于LLM的随机特性，LangChain在调试复杂应用程序时可能比较困难。</li><li><strong>学习曲线</strong>：普通产品或者开发者的上手学习成本较高，使用起来难度很大。</li></ul><h2 id="_7-langchain与其他工具的对比" tabindex="-1"><a class="header-anchor" href="#_7-langchain与其他工具的对比"><span>7 LangChain与其他工具的对比</span></a></h2><h3 id="_7-1-langchain-vs-llamaindex" tabindex="-1"><a class="header-anchor" href="#_7-1-langchain-vs-llamaindex"><span>7.1 LangChain vs LlamaIndex</span></a></h3><table><thead><tr><th>对比项</th><th>LangChain</th><th>LlamaIndex</th></tr></thead><tbody><tr><td><strong>核心目标</strong></td><td>集成LLM与工具，构建复杂流程</td><td>构建文档索引与问答系统</td></tr><tr><td><strong>数据处理能力</strong></td><td>需结合其他工具（如LlamaIndex）</td><td>内置强大的文档索引与查询</td></tr><tr><td><strong>链式推理与代理</strong></td><td>强（支持复杂链和代理）</td><td>弱（仅支持简单流程）</td></tr><tr><td><strong>适用场景</strong></td><td>多步骤任务、对话系统、工具集成</td><td>文档问答、知识库、非结构化数据处理</td></tr><tr><td><strong>学习曲线</strong></td><td>较高（需设计链和代理）</td><td>较低（快速上手索引功能）</td></tr></tbody></table><h3 id="_7-2-langchain-vs-langsmith" tabindex="-1"><a class="header-anchor" href="#_7-2-langchain-vs-langsmith"><span>7.2 LangChain vs LangSmith</span></a></h3><p>LangChain是一个开源的Python包，提供了构建和部署LLM应用程序的框架，适合早期开发和实验。而LangSmith是一个统一的DevOps平台，用于开发、协作、测试、部署和监控LLM应用程序，提供了一个统一的平台来管理LLM开发的所有方面，非常适合大规模且已准备就绪的应用程序。</p><h2 id="_8-学习资源与社区支持" tabindex="-1"><a class="header-anchor" href="#_8-学习资源与社区支持"><span>8 学习资源与社区支持</span></a></h2><ul><li><strong>官方文档</strong>：LangChain提供了详细的官方文档，包括教程、指南和API参考。</li><li><strong>GitHub仓库</strong>：LangChain的GitHub仓库是了解最新功能和贡献代码的好地方。</li><li><strong>社区支持</strong>：LangChain有一个活跃的社区，开发者可以在论坛、Discord频道或其他社交平台上提问和分享经验。</li></ul><h2 id="_9-总结" tabindex="-1"><a class="header-anchor" href="#_9-总结"><span>9 总结</span></a></h2><p>LangChain是一个强大的LLM应用开发框架，为开发者提供了丰富的工具和组件，极大地简化了与大语言模型交互的过程。通过灵活使用Chains、Agents和Memory等核心组件，开发者可以构建出高效、智能的应用程序。</p><p>虽然LangChain在某些方面还存在局限性，如可扩展性有限、调试困难和学习曲线较陡，但其快速原型制作、灵活性和开源特性使其成为构建LLM应用程序的重要工具。</p><p>随着人工智能技术的不断发展，LangChain及其生态系统将继续演进，为开发者提供更强大、更易用的工具来构建智能应用程序。对于有兴趣进入LLM应用开发领域的开发者来说，学习LangChain无疑是一个有价值的投资。</p>',19))])}const C=r(o,[["render",k]]),y=JSON.parse('{"path":"/article/qiv6674n/","title":"LangChain介绍","lang":"zh-CN","frontmatter":{"title":"LangChain介绍","createTime":"2025/09/01 11:44:24","permalink":"/article/qiv6674n/","tags":["LangChain","AI"],"excerpt":"在我的黑神话悟空游戏助手中，后端用到了LangChain框架，整理学习一下。","description":"LangChain：大语言模型应用开发框架详解 1 什么是LangChain？ LangChain是一个开源的Python框架，专为简化基于大语言模型（LLM）的应用程序开发而设计。它由Lang.AI（语言人工智能）开发，最初于2022年10月作为开源项目发布，并迅速在GitHub上获得广泛关注。LangChain的核心目标是解决将LLM集成到实际应用...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LangChain介绍\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-01T03:55:03.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/qiv6674n/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"LangChain介绍"}],["meta",{"property":"og:description","content":"LangChain：大语言模型应用开发框架详解 1 什么是LangChain？ LangChain是一个开源的Python框架，专为简化基于大语言模型（LLM）的应用程序开发而设计。它由Lang.AI（语言人工智能）开发，最初于2022年10月作为开源项目发布，并迅速在GitHub上获得广泛关注。LangChain的核心目标是解决将LLM集成到实际应用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T03:55:03.000Z"}],["meta",{"property":"article:tag","content":"AI"}],["meta",{"property":"article:tag","content":"LangChain"}],["meta",{"property":"article:modified_time","content":"2025-09-01T03:55:03.000Z"}]]},"readingTime":{"minutes":8.62,"words":2585},"git":{"createdTime":1756698903000,"updatedTime":1756698903000,"contributors":[{"name":"ziqingchuan","username":"ziqingchuan","email":"221250108@smail.nju.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/ziqingchuan?v=4","url":"https://github.com/ziqingchuan"}]},"autoDesc":true,"filePathRelative":"AI/LangChain介绍.md","headers":[],"categoryList":[{"id":"0a40e3","sort":10002,"name":"AI"}]}');export{C as comp,y as data};

import{_ as l,c as o,b as e,a,d as n,e as r,r as i,o as s}from"./app-DCxMKE9g.js";const p={},h={id:"一、http-请求头",tabindex:"-1"},u={class:"header-anchor",href:"#一、http-请求头"},g={id:"二、http-状态码",tabindex:"-1"},T={class:"header-anchor",href:"#二、http-状态码"},c={id:"三、http-请求方法",tabindex:"-1"},m={class:"header-anchor",href:"#三、http-请求方法"};function x(b,t){const d=i("Badge");return s(),o("div",null,[e("h2",h,[e("a",u,[e("span",null,[t[0]||(t[0]=n("一、HTTP 请求头 ",-1)),r(d,{text:"客户端与服务器的对话凭证",type:"tip"})])])]),t[23]||(t[23]=a('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>HTTP 请求头是客户端向服务器发送请求时附加的元数据，用于描述请求的上下文信息（如客户端类型、数据格式、认证信息等）。服务器通过解析请求头，可调整响应策略（如返回指定格式的数据、验证权限等）。</p></div><h3 id="常见请求头分类及作用" tabindex="-1"><a class="header-anchor" href="#常见请求头分类及作用"><span>常见请求头分类及作用</span></a></h3><h4 id="_1-身份与环境标识类" tabindex="-1"><a class="header-anchor" href="#_1-身份与环境标识类"><span>（1）<mark class="important">身份与环境标识类</mark></span></a></h4>',3)),e("ul",null,[e("li",null,[r(d,{text:"User-Agent",type:"tip"}),t[1]||(t[1]=n('：标识发送请求的客户端类型（浏览器、设备、爬虫等），格式通常为"应用名称/版本 操作系统 设备信息"。',-1)),t[2]||(t[2]=e("p",null,[n("例如："),e("code",null,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"),n("。")],-1))]),e("li",null,[r(d,{text:"Accept",type:"tip"}),t[3]||(t[3]=n("：告知服务器客户端可接收的数据格式（MIME 类型），多个类型用逗号分隔，权重通过 ",-1)),t[4]||(t[4]=e("code",null,"q=值",-1)),t[5]||(t[5]=n(" 表示。",-1)),t[6]||(t[6]=e("p",null,[n("例如："),e("code",null,"Accept: text/html, application/json;q=0.9, */*;q=0.8"),n(" 表示优先接收 HTML，其次是 JSON，最后是任意类型。")],-1))]),e("li",null,[r(d,{text:"Accept-Language",type:"tip"}),t[7]||(t[7]=n("：客户端可接受的自然语言，用于国际化内容返回。",-1)),t[8]||(t[8]=e("p",null,[n("例如："),e("code",null,"Accept-Language: zh-CN,zh;q=0.9,en;q=0.8"),n(" 表示优先中文，其次英文。")],-1))])]),t[24]||(t[24]=e("h4",{id:"_2-数据传输控制类",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-数据传输控制类"},[e("span",null,[n("（2）"),e("mark",{class:"important"},"数据传输控制类")])])],-1)),e("ul",null,[e("li",null,[r(d,{text:"Content-Type",type:"danger"}),t[9]||(t[9]=n("：仅用于 POST、PUT 等包含请求体的方法，指定请求体的数据格式。常见值：",-1)),t[10]||(t[10]=e("ul",null,[e("li",null,[e("code",null,"application/x-www-form-urlencoded"),n("：表单默认格式，数据以 "),e("code",null,"key=value&key2=value2"),n(" 拼接。")]),e("li",null,[e("code",null,"multipart/form-data"),n("：用于上传文件或包含二进制数据的表单。")]),e("li",null,[e("code",null,"application/json"),n("：JSON 格式数据（前后端分离常用）。")])],-1))]),e("li",null,[r(d,{text:"Content-Length",type:"danger"}),t[11]||(t[11]=n("：表示请求体的字节长度，帮助服务器确认数据是否完整接收。",-1))]),e("li",null,[r(d,{text:"Connection",type:"danger"}),t[12]||(t[12]=n("：控制连接状态，",-1)),t[13]||(t[13]=e("code",null,"Connection: keep-alive",-1)),t[14]||(t[14]=n(" 表示复用 TCP 连接（HTTP/1.1 默认），减少握手开销。",-1))])]),t[25]||(t[25]=e("h4",{id:"_3-缓存与安全类",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-缓存与安全类"},[e("span",null,[n("（3）"),e("mark",{class:"important"},"缓存与安全类")])])],-1)),e("ul",null,[e("li",null,[r(d,{text:"Cache-Control",type:"warning"}),t[15]||(t[15]=n("：控制请求的缓存策略。",-1)),t[16]||(t[16]=e("p",null,[n("例如 "),e("code",null,"Cache-Control: no-cache"),n(" 表示不使用缓存，需向服务器验证新鲜度；"),e("code",null,"max-age=3600"),n(" 表示缓存有效期 3600 秒。")],-1))]),e("li",null,[r(d,{text:"Authorization",type:"warning"}),t[17]||(t[17]=n("：用于身份认证，通常携带令牌（Token）或用户名密码。",-1)),t[18]||(t[18]=e("p",null,[n("例如："),e("code",null,"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."),n("（JWT 令牌格式）。")],-1))]),e("li",null,[r(d,{text:"Origin",type:"warning"}),t[19]||(t[19]=n("：表示请求的源站（协议 + 域名 + 端口），用于跨域资源共享（CORS）验证。",-1)),t[20]||(t[20]=e("p",null,[n("例如 "),e("code",null,"Origin: https://www.example.com"),n("。")],-1))])]),e("h2",g,[e("a",T,[e("span",null,[t[21]||(t[21]=n("二、HTTP 状态码 ",-1)),r(d,{text:"服务器响应的状态标识",type:"warning"})])])]),t[26]||(t[26]=a('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>HTTP 状态码是服务器对请求的处理结果的数字标识，由三位数字组成，分为 5 类（以第一位数字区分）。理解状态码可快速判断请求成功与否、失败原因，是调试接口的关键依据。</p></div><h3 id="状态码分类及核心状态码解析" tabindex="-1"><a class="header-anchor" href="#状态码分类及核心状态码解析"><span>状态码分类及核心状态码解析</span></a></h3><h4 id="_1xx-信息性状态码-临时响应-表示请求已接收" tabindex="-1"><a class="header-anchor" href="#_1xx-信息性状态码-临时响应-表示请求已接收"><span><mark>1xx</mark>：信息性状态码（临时响应，表示请求已接收）</span></a></h4><table><thead><tr><th>状态码</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>服务器已接收请求头，客户端可继续发送请求体（主要用于大文件上传场景）</td></tr><tr><td>101</td><td>Switching Protocols</td><td>服务器同意客户端的协议切换请求（如从 HTTP 切换到 WebSocket）</td></tr></tbody></table><h4 id="_2xx-成功状态码-请求被正常处理" tabindex="-1"><a class="header-anchor" href="#_2xx-成功状态码-请求被正常处理"><span><mark>2xx</mark>：成功状态码（请求被正常处理）</span></a></h4><table><thead><tr><th>状态码</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求成功，响应体包含具体数据（最常见的成功状态）</td></tr><tr><td>201</td><td>Created</td><td>请求成功且服务器创建了新资源（如 POST 新增数据时返回，响应头通常包含 <code>Location</code> 指向新资源地址）</td></tr><tr><td>204</td><td>No Content</td><td>请求成功，但响应体无内容（如 DELETE 删除资源后返回，客户端无需刷新页面）</td></tr><tr><td>206</td><td>Partial Content</td><td>部分请求成功（用于断点续传，客户端通过 <code>Range</code> 头指定获取部分数据）</td></tr></tbody></table><h4 id="_3xx-重定向状态码-需要客户端进一步操作" tabindex="-1"><a class="header-anchor" href="#_3xx-重定向状态码-需要客户端进一步操作"><span><mark>3xx</mark>：重定向状态码（需要客户端进一步操作）</span></a></h4><table><thead><tr><th>状态码</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>资源永久迁移到新地址，客户端应更新书签，后续请求直接使用新地址（浏览器会缓存重定向）</td></tr><tr><td>302</td><td>Found</td><td>资源临时迁移到新地址，客户端下次请求仍使用原地址（不缓存）</td></tr><tr><td>304</td><td>Not Modified</td><td>资源未修改，客户端可使用本地缓存（配合 <code>If-Modified-Since</code> 或 <code>If-None-Match</code> 头使用）</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>与 302 类似，但严格禁止请求方法变更（如原 POST 请求重定向后仍用 POST）</td></tr></tbody></table><h4 id="_4xx-客户端错误状态码-请求存在错误" tabindex="-1"><a class="header-anchor" href="#_4xx-客户端错误状态码-请求存在错误"><span><mark>4xx</mark>：客户端错误状态码（请求存在错误）</span></a></h4><table><thead><tr><th>状态码</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>400</td><td>Bad Request</td><td>请求格式错误（如 JSON 语法错误、参数缺失），服务器无法处理</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求需要身份认证（未携带令牌或令牌无效），客户端需重新登录</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器拒绝请求（已认证但无权限，如普通用户访问管理员接口）</td></tr><tr><td>404</td><td>Not Found</td><td>请求的资源不存在（URL 错误或资源已删除）</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>请求方法不被允许（如用 POST 访问仅支持 GET 的接口），响应头 <code>Allow</code> 会说明允许的方法</td></tr><tr><td>408</td><td>Request Timeout</td><td>服务器等待请求超时（客户端发送请求过慢）</td></tr><tr><td>413</td><td>Payload Too Large</td><td>请求体过大，服务器无法处理（如上传文件超过限制）</td></tr><tr><td>429</td><td>Too Many Requests</td><td>客户端请求过于频繁，触发服务器限流策略（通常配合 <code>Retry-After</code> 头告知重试时间）</td></tr></tbody></table><h4 id="_5xx-服务器错误状态码-服务器处理请求时出错" tabindex="-1"><a class="header-anchor" href="#_5xx-服务器错误状态码-服务器处理请求时出错"><span><mark>5xx</mark>：服务器错误状态码（服务器处理请求时出错）</span></a></h4><table><thead><tr><th>状态码</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误（如代码bug、数据库连接失败，最常见的服务器错误）</td></tr><tr><td>502</td><td>Bad Gateway</td><td>服务器作为网关/代理时，收到上游服务器的无效响应（如反向代理后端服务崩溃）</td></tr><tr><td>503</td><td>Service Unavailable</td><td>服务器暂时无法处理请求（如维护中），通常会包含 <code>Retry-After</code> 头建议重试时间</td></tr><tr><td>504</td><td>Gateway Timeout</td><td>服务器作为网关/代理时，等待上游服务器响应超时</td></tr></tbody></table>',12)),e("h2",c,[e("a",m,[e("span",null,[t[22]||(t[22]=n("三、HTTP 请求方法 ",-1)),r(d,{text:"客户端请求的操作类型",type:"danger"})])])]),t[27]||(t[27]=a('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>HTTP 请求方法定义了客户端对服务器资源的操作类型，遵循&quot;语义化&quot;设计，不同方法对应不同的操作意图（如获取、新增、修改、删除）。</p></div><h3 id="核心请求方法及使用场景" tabindex="-1"><a class="header-anchor" href="#核心请求方法及使用场景"><span>核心请求方法及使用场景</span></a></h3><h4 id="_1-get-获取资源-最常用" tabindex="-1"><a class="header-anchor" href="#_1-get-获取资源-最常用"><span>（1）<mark class="note">GET</mark>：获取资源（最常用）</span></a></h4><ul><li><strong>语义</strong>：从服务器获取指定资源（只读操作，无副作用）。</li><li><strong>特点</strong>： <ul><li>请求参数通过 URL Query 传递（<code>?key1=value1&amp;key2=value2</code>），长度有限制（不同浏览器限制不同，通常不超过 2048 字符）。</li><li>可被缓存（浏览器会默认缓存 GET 请求结果）、收藏为书签、记录在浏览器历史中。</li><li>不应用于修改数据的操作（因为可能被重复执行，如刷新页面）。</li></ul></li><li><strong>使用场景</strong>：查询数据（如列表查询、详情查询）、搜索功能等。</li></ul><h4 id="_2-post-提交资源-创建资源" tabindex="-1"><a class="header-anchor" href="#_2-post-提交资源-创建资源"><span>（2）<mark class="note">POST</mark>：提交资源（创建资源）</span></a></h4><ul><li><strong>语义</strong>：向服务器提交数据，请求服务器创建新资源（有副作用）。</li><li><strong>特点</strong>： <ul><li>请求参数放在请求体中（无长度限制），支持多种数据格式（JSON、表单、文件等）。</li><li>默认不被缓存，不会记录在浏览器历史中，不能收藏为书签。</li><li>多次提交可能产生重复资源（如重复提交订单，需后端做幂等性处理）。</li></ul></li><li><strong>使用场景</strong>：新增数据（如注册用户、创建订单）、提交表单、上传文件等。</li></ul><h4 id="_3-put-更新资源-全量更新" tabindex="-1"><a class="header-anchor" href="#_3-put-更新资源-全量更新"><span>（3）<mark class="note">PUT</mark>：更新资源（全量更新）</span></a></h4><ul><li><strong>语义</strong>：向服务器提交数据，请求服务器更新指定资源（若资源不存在则创建）。</li><li><strong>特点</strong>： <ul><li>要求客户端提供资源的完整数据（全量更新），例如更新用户信息时需传递所有字段。</li><li>幂等性操作（多次执行结果一致），适合用于&quot;替换&quot;资源。</li></ul></li><li><strong>使用场景</strong>：全量更新资源（如覆盖式修改用户资料）。</li></ul><h4 id="_4-patch-更新资源-部分更新" tabindex="-1"><a class="header-anchor" href="#_4-patch-更新资源-部分更新"><span>（4）<mark class="note">PATCH</mark>：更新资源（部分更新）</span></a></h4><ul><li><strong>语义</strong>：向服务器提交数据，请求服务器部分更新指定资源（仅更新提供的字段）。</li><li><strong>特点</strong>： <ul><li>仅需传递需要修改的字段（增量更新），比 PUT 更高效。</li><li>幂等性（但实际实现中需注意，例如 <code>PATCH /user/1</code> 每次执行都是修改同一字段，则幂等）。</li></ul></li><li><strong>使用场景</strong>：部分更新资源（如仅修改用户的手机号或邮箱）。</li></ul><h4 id="_5-delete-删除资源" tabindex="-1"><a class="header-anchor" href="#_5-delete-删除资源"><span>（5）<mark class="note">DELETE</mark>：删除资源</span></a></h4><ul><li><strong>语义</strong>：请求服务器删除指定资源。</li><li><strong>特点</strong>： <ul><li>幂等性操作（多次删除同一资源，结果一致：第一次删除成功，后续删除返回 404）。</li></ul></li><li><strong>使用场景</strong>：删除数据（如删除订单、删除用户账号）。</li></ul><h4 id="_6-其他常用方法" tabindex="-1"><a class="header-anchor" href="#_6-其他常用方法"><span>（6）其他常用方法</span></a></h4><ul><li><strong>HEAD</strong>：与 GET 类似，但服务器仅返回响应头，不返回响应体，用于获取资源的元信息（如判断资源是否存在、获取文件大小）。</li><li><strong>OPTIONS</strong>：请求服务器支持的 HTTP 方法（主要用于跨域请求前的预检请求，验证服务器是否允许跨域）。</li></ul><h2 id="四、总结-http-三要素的关联与实践意义" tabindex="-1"><a class="header-anchor" href="#四、总结-http-三要素的关联与实践意义"><span>四、总结：HTTP 三要素的关联与实践意义</span></a></h2><p>HTTP 请求头、状态码、请求方法是构成 HTTP 协议的核心要素，三者协同工作：</p><p><strong>请求方法</strong>定义&quot;做什么&quot;（操作类型），<strong>请求头</strong>描述&quot;怎么做&quot;（附加信息），<strong>状态码</strong>反馈&quot;结果如何&quot;（处理状态）。</p><p>在实际开发中，掌握这三部分知识的意义在于：</p><ol><li><strong>接口调试</strong>：通过状态码快速定位问题（如 401 排查认证，500 排查服务器错误）。</li><li><strong>性能优化</strong>：利用请求头的缓存策略（<code>Cache-Control</code>）减少重复请求，提升加载速度。</li><li><strong>安全控制</strong>：通过 <code>Authorization</code> 头实现身份验证，<code>Origin</code> 头配合 CORS 控制跨域访问。</li><li><strong>语义化设计</strong>：规范使用请求方法（如 GET 只读、POST 创建），使接口更易理解和维护。</li></ol><p>HTTP 协议仍在不断演进（如 HTTP/2、HTTP/3 对性能的优化），但请求头、状态码、请求方法的核心设计思想保持稳定，是前端开发者必须掌握的基础知识。</p>',20))])}const P=l(p,[["render",x]]),f=JSON.parse('{"path":"/article/n7gen2m5/","title":"http的请求头、状态码、请求方法","lang":"zh-CN","frontmatter":{"title":"http的请求头、状态码、请求方法","createTime":"2025/07/02 18:54:37","permalink":"/article/n7gen2m5/","tags":["HTTP"],"excerpt":"详细梳理一下关于请求头、状态码以及http请求方法相关的知识。","description":"一、HTTP 请求头 提示 HTTP 请求头是客户端向服务器发送请求时附加的元数据，用于描述请求的上下文信息（如客户端类型、数据格式、认证信息等）。服务器通过解析请求头，可调整响应策略（如返回指定格式的数据、验证权限等）。 常见请求头分类及作用 （1）身份与环境标识类 （2）数据传输控制类 （3）缓存与安全类 二、HTTP 状态码 提示 HTTP 状态...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"http的请求头、状态码、请求方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-02T11:56:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/n7gen2m5/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"http的请求头、状态码、请求方法"}],["meta",{"property":"og:description","content":"一、HTTP 请求头 提示 HTTP 请求头是客户端向服务器发送请求时附加的元数据，用于描述请求的上下文信息（如客户端类型、数据格式、认证信息等）。服务器通过解析请求头，可调整响应策略（如返回指定格式的数据、验证权限等）。 常见请求头分类及作用 （1）身份与环境标识类 （2）数据传输控制类 （3）缓存与安全类 二、HTTP 状态码 提示 HTTP 状态..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-02T11:56:44.000Z"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:modified_time","content":"2025-07-02T11:56:44.000Z"}]]},"readingTime":{"minutes":8.53,"words":2560},"git":{"createdTime":1751457404000,"updatedTime":1751457404000,"contributors":[{"name":"221250108","username":"221250108","email":"221250108@smail.nju.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/221250108?v=4","url":"https://github.com/221250108"}]},"autoDesc":true,"filePathRelative":"HTTP/http的请求头、状态码、请求方法.md","headers":[],"categoryList":[{"id":"293c9e","sort":10002,"name":"HTTP"}]}');export{P as comp,f as data};

import{_ as i,c as a,a as n,o as t}from"./app-B45Goy4V.js";const l={};function h(k,s){return t(),a("div",null,s[0]||(s[0]=[n(`<p>在现代Web应用开发中，数据的安全性如同数字世界的护城河与城门守卫，至关重要。作为开发者，我们必须确保用户数据在传输和存储过程中不被窃取或篡改。本文将深入浅出地探讨Java后端与前端交互时涉及的<strong>信息传输加密</strong>和<strong>身份鉴权</strong>两大核心安全机制。</p><h2 id="一、-为何需要加密-——-不设防的世界很危险" tabindex="-1"><a class="header-anchor" href="#一、-为何需要加密-——-不设防的世界很危险"><span>一、 为何需要加密？—— 不设防的世界很危险</span></a></h2><p>想象一下，如果你在网上购物时，你的账号、密码、支付信息全部以明文（就像这张纸条：<code>密码：123456</code>）的形式在网络上传输，会发生什么？任何一个能够截获网络数据包的人（比如在公共Wi-Fi上）都能轻易地看到这一切。这就是著名的 <em>“中间人攻击”（Man-in-the-Middle Attack）</em>。</p><p>为了杜绝这种情况，我们需要对传输的信息进行加密，将其变成一段<strong>乱码（密文）</strong>，即使被截获，攻击者也难以解读其原始含义。</p><h2 id="二、-加密的两种核心方式-对称-vs-非对称" tabindex="-1"><a class="header-anchor" href="#二、-加密的两种核心方式-对称-vs-非对称"><span>二、 加密的两种核心方式：对称 vs 非对称</span></a></h2><p>加密算法主要分为两大类：<mark>对称加密</mark>和<mark>非对称加密</mark>。理解它们的区别是理解现代网络安全的基础。</p><h3 id="_1-对称加密-symmetric-encryption" tabindex="-1"><a class="header-anchor" href="#_1-对称加密-symmetric-encryption"><span>1. 对称加密 (Symmetric Encryption)</span></a></h3><p><strong>核心思想：</strong> 使用<strong>同一把钥匙</strong>进行加密和解密。</p><ul><li><strong>比喻：</strong> 就像用一个特定的钥匙锁上宝箱，对方必须用同一把钥匙才能打开。这把钥匙通常被称为<strong>密钥（Key）</strong>。</li><li><strong>工作流程：</strong><ol><li>发送方（前端）和接收方（后端）预先<strong>安全地</strong>商量好一个共同的密钥 <code>S</code>。</li><li>前端用密钥 <code>S</code> 加密数据，得到密文，发送给后端。</li><li>后端用同样的密钥 <code>S</code> 解密密文，得到原始数据。</li></ol></li><li><strong>常见算法：</strong> AES (Advanced Encryption Standard, 最常用)、DES、3DES。</li><li><strong>优点：</strong> 算法简单，<strong>加解密速度快</strong>，效率高，适合加密大量数据。</li><li><strong>缺点：</strong> <strong>密钥分发困难</strong>。如何安全地把密钥 <code>S</code> 告诉对方？如果在互联网上直接传输密钥，密钥本身也可能被截获。</li></ul><h3 id="_2-非对称加密-asymmetric-encryption" tabindex="-1"><a class="header-anchor" href="#_2-非对称加密-asymmetric-encryption"><span>2. 非对称加密 (Asymmetric Encryption)</span></a></h3><p><strong>核心思想：</strong> 使用<strong>一对钥匙</strong>：一个<strong>公钥(Public Key)<strong>和一个</strong>私钥(Private Key)</strong>。</p><ul><li><strong>比喻：</strong> 公钥就像一把打开的挂锁（任何人都可以拿到），私钥则是唯一能打开这把锁的钥匙（自己严格保管）。 <ul><li><strong>公钥</strong>是公开的，可以发给任何人。</li><li><strong>私钥</strong>是绝对私密的，只能由自己持有。</li></ul></li><li><strong>工作流程（两种用途）：</strong><ul><li><strong>加密信息：</strong> 如果A想发送加密信息给B。 <ol><li>A获取B的公钥。</li><li>A用B的<strong>公钥</strong>加密信息，发送给B。</li><li>B收到密文后，用自己的<strong>私钥</strong>解密。因为只有B的私钥能解密用B的公钥加密的内容，所以信息是安全的。</li></ol></li><li><strong>数字签名（用于身份验证）：</strong> 如果A想向B证明信息是自己发的且未被篡改。 <ol><li>A用自己的<strong>私钥</strong>对信息的摘要进行加密，这个加密后的摘要就是<strong>数字签名</strong>，附在信息后面一起发送给B。</li><li>B收到信息后，用A的<strong>公钥</strong>对签名进行解密，得到摘要A。</li><li>B再用同样的算法计算收到信息的摘要B。</li><li>如果摘要A和摘要B一致，则证明信息确实来自A且未被修改。</li></ol></li></ul></li><li><strong>常见算法：</strong> RSA (最常用)、ECC（椭圆曲线加密）。</li><li><strong>优点：</strong> <strong>安全性更高</strong>，解决了密钥分发问题，公钥可以任意公开。</li><li><strong>缺点：</strong> <strong>计算非常复杂，加解密速度慢</strong>，比对称加密慢几个数量级，不适合加密大量数据。</li></ul><h2 id="三、-强强联合-https与ssl-tls" tabindex="-1"><a class="header-anchor" href="#三、-强强联合-https与ssl-tls"><span>三、 强强联合：HTTPS与SSL/TLS</span></a></h2><p>在实际应用中（比如HTTPS），我们并不单独使用某一种加密方式，而是将它们结合使用，取长补短。这个过程主要由SSL/TLS协议完成。</p><ol><li><p><strong>握手阶段（非对称加密立功）：</strong></p><ul><li>浏览器（客户端）访问服务器， say hello。</li><li>服务器返回其SSL证书，其中包含服务器的<strong>公钥</strong>。</li><li>浏览器验证证书的合法性（是否由可信机构颁发，域名是否匹配等）。</li><li>验证通过后，浏览器生成一个随机的<strong>对称密钥</strong>（称为<code>Pre-Master Secret</code>）。</li><li>浏览器用服务器的<strong>公钥</strong>加密这个随机对称密钥，发送给服务器。</li><li>服务器用自己的<strong>私钥</strong>解密，得到这个对称密钥。</li><li><strong>至此，双方安全地共享了同一把对称密钥，且从未在网络上明文传输过。</strong></li></ul></li><li><p><strong>通信阶段（对称加密立功）：</strong></p><ul><li>后续所有的数据传输，都使用这把<strong>对称密钥</strong>进行加密和解密。</li><li>因为对称加密速度快，保证了通信的高效。</li></ul></li></ol><p><strong>结论：HTTPS = HTTP + SSL/TLS，它利用非对称加密的安全特性来交换对称密钥，再利用对称加密的高效来进行实际的数据传输。</strong></p><h2 id="四、-身份鉴权-authentication-你是谁" tabindex="-1"><a class="header-anchor" href="#四、-身份鉴权-authentication-你是谁"><span>四、 身份鉴权 (Authentication)：你是谁？</span></a></h2><p>加密保证了通信内容的安全，但还有一个关键问题：<strong>如何确认“你是你声称的那个人”？</strong> 这就是鉴权要解决的问题。</p><p>传统的鉴权方式是<strong>Session-Cookie</strong>机制：</p><ol><li>用户登录，后端验证用户名密码正确。</li><li>后端在服务器内存或数据库中创建一个Session对象，存储用户信息，并生成一个唯一的<code>SessionId</code>。</li><li>后端将<code>SessionId</code>通过<code>Set-Cookie</code>头部返回给前端浏览器。</li><li>浏览器后续每次请求都会自动带上这个Cookie（包含<code>SessionId</code>）。</li><li>后端根据<code>SessionId</code>找到对应的Session，从而知道用户身份。</li></ol><p><strong>缺点：</strong> 服务器需要存储所有用户的Session信息，在分布式或微服务架构中，需要做Session共享，增加了复杂度和服务器开销。</p><h2 id="五、-现代解决方案-jwt-json-web-token" tabindex="-1"><a class="header-anchor" href="#五、-现代解决方案-jwt-json-web-token"><span>五、 现代解决方案：JWT (JSON Web Token)</span></a></h2><p>JWT是一种<strong>无状态（Stateless）</strong> 的鉴权机制，完美解决了分布式系统的鉴权问题。服务器不再需要存储Session信息。</p><h3 id="_1-jwt是什么" tabindex="-1"><a class="header-anchor" href="#_1-jwt是什么"><span>1. JWT是什么？</span></a></h3><p>JWT是一个紧凑的、URL安全的令牌，它由三部分组成，用点<code>.</code>分隔： <code>Header.Payload.Signature</code></p><ul><li><strong>Header (头部):</strong> 通常由两部分组成，令牌类型（即JWT）和所使用的签名算法（如HMAC SHA256或RSA）。<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">alg</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">HS256</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">typ</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">JWT</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>Payload (负载):</strong> 存放实际需要传递的信息，比如用户ID、用户名、过期时间等。这些信息被称为<strong>声明（Claims）</strong>。<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">sub</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1234567890</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">John Doe</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">admin</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exp</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1516239022</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>Signature (签名):</strong> 对前两部分的签名，用于防止令牌被篡改。 <ul><li>签名的生成方式：<code>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</code></li></ul></li></ul><p>最终，一个JToken看起来是这样： <code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></p><h3 id="_2-jwt的工作流程" tabindex="-1"><a class="header-anchor" href="#_2-jwt的工作流程"><span>2. JWT的工作流程</span></a></h3><ol><li><strong>登录：</strong> 用户用用户名密码登录。</li><li><strong>签发Token：</strong> 后端验证成功後，生成一个JWT（包含用户信息如userId），并用一个只有服务器知道的<strong>密钥(Secret)</strong> 为其签名，然后将JWT返回给前端。</li><li><strong>存储与发送：</strong> 前端（通常存放在localStorage或Cookie中）在后续请求的HTTP Header的<code>Authorization</code>字段中携带此Token：<code>Authorization: Bearer &lt;token&gt;</code>。</li><li><strong>验证Token：</strong> 后端收到请求后： <ul><li>检查JWT格式是否正确。</li><li>用同样的<strong>密钥(Secret)</strong> 验证签名是否有效。<strong>签名验证是核心</strong>，如果有人篡改了Payload，签名就会对不上，验证就会失败。</li><li>检查Token是否过期（检查<code>exp</code>声明）。</li><li>如果全部通过，即可信任Payload中的用户信息，完成鉴权。</li></ul></li></ol><h3 id="_3-jwt的优点与注意事项" tabindex="-1"><a class="header-anchor" href="#_3-jwt的优点与注意事项"><span>3. JWT的优点与注意事项</span></a></h3><ul><li><p><strong>优点：</strong></p><ul><li><strong>无状态：</strong> 服务器不需要存储Token，减轻了存储压力。</li><li><strong>易于扩展：</strong> 非常适合分布式和微服务系统，任何服务只要持有密钥就能验证Token。</li><li><strong>多端支持：</strong> 天然支持移动端、API调用等场景。</li></ul></li><li><p><strong>注意事项：</strong></p><ul><li><strong>Token一旦签发，在过期前始终有效</strong>。无法在服务端直接废止某个Token，这是JWT的一个设计特点。解决方案有：使用黑名单、设置较短的过期时间、使用Refresh Token机制等。</li><li><strong>Payload默认只是Base64编码，并非加密</strong>。<strong>绝对不要在JWT的Payload中存放敏感信息（如密码）</strong>。如果需要加密，可以选择JWE（JSON Web Encryption）规范。</li><li><strong>密钥(Secret)</strong> 必须严格保管在服务端。</li></ul></li></ul><h2 id="六、-java后端实战-生成与验证jwt" tabindex="-1"><a class="header-anchor" href="#六、-java后端实战-生成与验证jwt"><span>六、 Java后端实战：生成与验证JWT</span></a></h2><p>在Java中，我们可以使用流行的库如<code>jjwt</code>来方便地操作JWT。</p><p><strong>Maven依赖:</strong></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">io.jsonwebtoken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jjwt-api</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0.11.5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">io.jsonwebtoken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jjwt-impl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0.11.5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">runtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">io.jsonwebtoken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jjwt-jackson</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0.11.5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">runtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例代码：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jsonwebtoken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jsonwebtoken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">security</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Keys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">security</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Date</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> JwtUtil</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 生成一个安全密钥（HS256算法要求密钥长度至少256位）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Key</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Keys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">secretKeyFor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SignatureAlgorithm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">HS256</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // Token有效期</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> EXPIRATION_TIME</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 86400000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 24小时</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 生成JWT</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">generateToken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">userId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Jwts</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">builder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setSubject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">userId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 设置主题（用户ID）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setIssuedAt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Date</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 签发时间</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setExpiration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Date</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> EXPIRATION_TIME</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 过期时间</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">signWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 使用密钥签名</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">compact</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 解析验证JWT</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">validateToken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Claims</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> claims</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Jwts</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">parserBuilder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setSigningKey</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 设置签名密钥</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">parseClaimsJws</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getBody</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> claims</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getSubject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 返回用户ID</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ExpiredJwtException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RuntimeException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Token已过期</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">JwtException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RuntimeException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Token无效</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><table><thead><tr><th style="text-align:left;">主题</th><th style="text-align:left;">核心技术</th><th style="text-align:left;">解决的核心问题</th><th style="text-align:left;">应用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>传输加密</strong></td><td style="text-align:left;"><strong>HTTPS (TLS)</strong><br>- 非对称加密交换密钥<br>- 对称加密加密数据</td><td style="text-align:left;">防止通信内容被窃听和篡改</td><td style="text-align:left;"><strong>所有</strong>Web通信的基石</td></tr><tr><td style="text-align:left;"><strong>身份鉴权</strong></td><td style="text-align:left;"><strong>JWT (JSON Web Token)</strong><br>- 数字签名保证Token可信</td><td style="text-align:left;">无状态地确认用户身份，解决分布式鉴权难题</td><td style="text-align:left;">API接口、移动端、单点登录(SSO)</td></tr></tbody></table><p>将加密与鉴权结合，就构建了一套完整的安全体系：</p><ol><li><strong>全程HTTPS</strong>：保证数据传输过程中的安全。</li><li><strong>JWT鉴权</strong>：保证API请求来源的合法性和身份真实性。</li></ol>`,41)]))}const p=i(l,[["render",h]]),r=JSON.parse('{"path":"/article/b6k9b12u/","title":"加密与鉴权","lang":"zh-CN","frontmatter":{"title":"加密与鉴权","createTime":"2025/09/11 09:43:35","permalink":"/article/b6k9b12u/","tags":["安全","HTTP"],"excerpt":"详细介绍关于加密与鉴权的相关知识。","description":"在现代Web应用开发中，数据的安全性如同数字世界的护城河与城门守卫，至关重要。作为开发者，我们必须确保用户数据在传输和存储过程中不被窃取或篡改。本文将深入浅出地探讨Java后端与前端交互时涉及的信息传输加密和身份鉴权两大核心安全机制。 一、 为何需要加密？—— 不设防的世界很危险 想象一下，如果你在网上购物时，你的账号、密码、支付信息全部以明文（就像这...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加密与鉴权\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-11T01:53:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/b6k9b12u/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"加密与鉴权"}],["meta",{"property":"og:description","content":"在现代Web应用开发中，数据的安全性如同数字世界的护城河与城门守卫，至关重要。作为开发者，我们必须确保用户数据在传输和存储过程中不被窃取或篡改。本文将深入浅出地探讨Java后端与前端交互时涉及的信息传输加密和身份鉴权两大核心安全机制。 一、 为何需要加密？—— 不设防的世界很危险 想象一下，如果你在网上购物时，你的账号、密码、支付信息全部以明文（就像这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-11T01:53:44.000Z"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:tag","content":"安全"}],["meta",{"property":"article:modified_time","content":"2025-09-11T01:53:44.000Z"}]]},"readingTime":{"minutes":8.59,"words":2578},"git":{"createdTime":1757555624000,"updatedTime":1757555624000,"contributors":[{"name":"ziqingchuan","username":"ziqingchuan","email":"221250108@smail.nju.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/ziqingchuan?v=4","url":"https://github.com/ziqingchuan"}]},"autoDesc":true,"filePathRelative":"HTTP/加密与鉴权.md","headers":[],"categoryList":[{"id":"293c9e","sort":10001,"name":"HTTP"}]}');export{p as comp,r as data};

import{_ as h,c as l,a as t,b as i,e,d as a,r as p,o as k}from"./app-Dn0h0_k-.js";const r={};function d(g,s){const n=p("Badge");return k(),l("div",null,[s[12]||(s[12]=t('<h2 id="一、spa的基本概念" tabindex="-1"><a class="header-anchor" href="#一、spa的基本概念"><span>一、SPA的基本概念</span></a></h2><div class="hint-container tip"><p class="hint-container-title">概念</p><p>SPA（单页应用）是一种特殊的Web应用架构，它<em><strong>通过动态重写当前页面来与用户交互</strong></em>，而不是从服务器加载全新的页面。</p><p>这意味着<em><strong>整个应用只需要加载一次HTML、CSS和JavaScript等核心资源</strong></em>，后续的页面切换和数据更新都在客户端完成，无需重新加载整个页面。</p></div><h3 id="与传统多页应用-mpa-的对比" tabindex="-1"><a class="header-anchor" href="#与传统多页应用-mpa-的对比"><span>与传统多页应用（MPA）的对比</span></a></h3><table><thead><tr><th>特性</th><th>单页应用（SPA）</th><th>多页应用（MPA）</th></tr></thead><tbody><tr><td>页面加载</td><td>首次加载完整资源，后续局部更新</td><td>每次跳转都重新加载完整页面</td></tr><tr><td>URL变化</td><td>通过路由机制实现无刷新变化</td><td>完整URL跳转</td></tr><tr><td>服务器请求</td><td>主要请求数据（API接口）</td><td>请求完整HTML页面</td></tr><tr><td>用户体验</td><td>流畅，接近原生应用</td><td>有页面刷新延迟</td></tr><tr><td>开发复杂度</td><td>较高，需处理路由、状态管理等</td><td>较低，逻辑相对简单</td></tr><tr><td>SEO友好度</td><td>较差（需特殊处理）</td><td>较好</td></tr></tbody></table><h2 id="二、spa的核心原理" tabindex="-1"><a class="header-anchor" href="#二、spa的核心原理"><span>二、SPA的核心原理</span></a></h2><p>SPA之所以能实现&quot;单页&quot;特性，主要依赖以下核心技术：</p><h3 id="_1-路由机制" tabindex="-1"><a class="header-anchor" href="#_1-路由机制"><span>1. 路由机制</span></a></h3><p>路由是SPA的核心组件，负责管理URL与页面内容的映射关系。它通过监听URL的变化（通常是<code>hash</code>或<code>history</code>模式），在不刷新页面的情况下加载对应的组件或内容。</p>',8)),i("ul",null,[i("li",null,[e(n,{text:"hash模式",type:"warning"}),s[0]||(s[0]=a(" ：利用URL中的",-1)),s[1]||(s[1]=i("code",null,"#",-1)),s[2]||(s[2]=a("后面的部分（哈希值）作为路由标识，例如",-1)),s[3]||(s[3]=i("code",null,"http://example.com/#/home",-1)),s[4]||(s[4]=a("。",-1))])]),s[13]||(s[13]=t(`<p><mark>哈希值的变化不会触发页面刷新，且可以通过<code>window.onhashchange</code>事件监听。</mark></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 简单的hash路由实现示例</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">onhashchange</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> hash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">location</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  switch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    case</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#/home</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      renderHome</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    case</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#/about</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      renderAbout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      renderNotFound</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),i("ul",null,[i("li",null,[e(n,{text:"history模式",type:"warning"}),s[5]||(s[5]=a("：利用HTML5的History API（",-1)),s[6]||(s[6]=i("code",null,"pushState",-1)),s[7]||(s[7]=a("、",-1)),s[8]||(s[8]=i("code",null,"replaceState",-1)),s[9]||(s[9]=a("等）来管理URL，实现无刷新的URL变化，例如",-1)),s[10]||(s[10]=i("code",null,"http://example.com/home",-1)),s[11]||(s[11]=a("。",-1))])]),s[14]||(s[14]=t(`<p><mark>这种模式需要服务器配合配置，否则刷新页面可能会出现404错误。</mark></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// history模式示例</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 改变URL但不刷新页面</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">history</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pushState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/home</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 监听历史记录变化</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">popstate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">location</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pathname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 根据path渲染对应内容</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-异步数据交互-ajax-fetch" tabindex="-1"><a class="header-anchor" href="#_2-异步数据交互-ajax-fetch"><span>2. 异步数据交互（AJAX/ Fetch）</span></a></h3><p>SPA通过异步数据请求与服务器交互，<strong><em>只获取必要的数据而非完整页面</em></strong>。常见的实现方式有：</p><ul><li><code>XMLHttpRequest</code>（传统AJAX）</li><li><code>Fetch API</code>（现代标准）</li><li>各类HTTP客户端库（如Axios）</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用Fetch API获取数据示例</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fetch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/api/user</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 更新页面内容，无需刷新</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    renderUserInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Error:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-组件化开发" tabindex="-1"><a class="header-anchor" href="#_3-组件化开发"><span>3. 组件化开发</span></a></h3><p>SPA通常采用组件化思想构建界面，将页面拆分为独立的、可复用的组件，每个组件负责管理自己的视图和逻辑。这种方式大大提高了代码的复用性和维护性。</p><h2 id="三、spa的优势" tabindex="-1"><a class="header-anchor" href="#三、spa的优势"><span>三、SPA的优势</span></a></h2><ol><li><p><strong>优秀的用户体验</strong>：页面切换无刷新，响应速度快，给用户流畅的操作体验，尤其适合交互频繁的应用。</p></li><li><p><strong>减少服务器压力</strong>：服务器只需提供数据接口，无需处理页面渲染，降低了服务器的计算和带宽成本。</p></li><li><p><strong>前后端分离</strong>：前端专注于用户界面和交互，后端专注于数据处理，使开发团队可以并行工作，提高开发效率。</p></li><li><p><strong>离线支持</strong>：结合Service Worker等技术，可以实现部分功能的离线访问，增强应用的可靠性。</p></li><li><p><strong>代码复用性高</strong>：组件化和模块化的开发方式，使得代码可以在不同场景下复用。</p></li></ol><h2 id="四、spa的挑战与解决方案" tabindex="-1"><a class="header-anchor" href="#四、spa的挑战与解决方案"><span>四、SPA的挑战与解决方案</span></a></h2><h3 id="_1-seo-搜索引擎优化-问题" tabindex="-1"><a class="header-anchor" href="#_1-seo-搜索引擎优化-问题"><span>1. SEO（搜索引擎优化）问题</span></a></h3><p><strong>问题</strong>：传统搜索引擎爬虫主要抓取HTML内容，而<mark class="warning">SPA的内容大多是通过JavaScript动态生成的，爬虫可能无法正确获取。</mark></p><p><strong>解决方案</strong>：</p><ul><li>服务端渲染（SSR）：在服务器端预先渲染页面内容，返回完整的HTML给客户端和爬虫。</li><li>静态站点生成（SSG）：在构建时生成静态HTML文件，适合内容变化不频繁的站点。</li><li>预渲染（Prerendering）：针对特定路由提前生成静态HTML。</li><li>使用<code>history.pushState</code>配合<code>&lt;link rel=&quot;prefetch&quot;&gt;</code>等标签辅助爬虫识别。</li></ul><h3 id="_2-首次加载时间过长" tabindex="-1"><a class="header-anchor" href="#_2-首次加载时间过长"><span>2. 首次加载时间过长</span></a></h3><p><strong>问题</strong>：SPA需要在首次加载时下载所有核心资源（框架、组件、业务逻辑等），可能导致初始加载时间较长。</p><p><strong>解决方案</strong>：</p><ul><li>代码分割（Code Splitting）：将代码拆分为多个小块，按需加载（如路由级别的懒加载）。</li><li>资源压缩与合并：减小文件体积，减少请求次数。</li><li>缓存策略：合理设置HTTP缓存头，利用Service Worker缓存静态资源。</li><li>骨架屏（Skeleton Screen）：在内容加载完成前显示占位UI，提升感知性能。</li></ul><h3 id="_3-内存管理问题" tabindex="-1"><a class="header-anchor" href="#_3-内存管理问题"><span>3. 内存管理问题</span></a></h3><p><strong>问题</strong>：长时间使用SPA可能导致内存泄漏，尤其是复杂应用中未正确销毁的事件监听、定时器或未释放的DOM引用。</p><p><strong>解决方案</strong>：</p><ul><li>组件卸载时清理事件监听、定时器和订阅。</li><li>使用WeakMap、WeakSet等弱引用数据结构存储临时数据。</li><li>定期进行内存检测，及时发现并修复泄漏点。</li></ul><h3 id="_4-状态管理复杂度" tabindex="-1"><a class="header-anchor" href="#_4-状态管理复杂度"><span>4. 状态管理复杂度</span></a></h3><p><strong>问题</strong>：随着应用规模扩大，组件间的状态共享和管理会变得复杂。</p><p><strong>解决方案</strong>：</p><ul><li>使用专门的状态管理库，如Redux（React）、Vuex/Pinia（Vue）、NgRx（Angular）。</li><li>采用合适的状态设计模式，如单一状态树、不可变数据等。</li></ul><h2 id="五、常见的spa框架与库" tabindex="-1"><a class="header-anchor" href="#五、常见的spa框架与库"><span>五、常见的SPA框架与库</span></a></h2><ol><li><p><strong>React</strong>：由Facebook开发的声明式UI库，生态丰富，适合构建复杂交互的大型应用，配合React Router和Redux等库可构建完善的SPA。</p></li><li><p><strong>Vue.js</strong>：渐进式JavaScript框架，易于学习和集成，官方提供Vue Router和Vuex，对SPA开发有良好支持。</p></li><li><p><strong>Angular</strong>：由Google开发的完整框架，内置路由、表单、HTTP等模块，适合大型企业级应用。</p></li><li><p><strong>Svelte</strong>：一种编译型框架，在构建时将组件编译为高效的原生JavaScript，无需运行时框架，性能优异。</p></li><li><p><strong>路由库</strong>：除了框架自带的路由解决方案，还有React Router、Vue Router、React Navigation等专门的路由库。</p></li></ol><h2 id="六、spa的适用场景" tabindex="-1"><a class="header-anchor" href="#六、spa的适用场景"><span>六、SPA的适用场景</span></a></h2><p>SPA并非万能解决方案，它更适合以下场景：</p><ul><li>交互频繁的应用（如管理后台、仪表盘）</li><li>对用户体验要求高的应用（如社交应用、电商应用）</li><li>功能复杂但页面切换不频繁的应用</li><li>希望实现前后端彻底分离的项目</li></ul><p>而以下场景可能更适合传统多页应用：</p><ul><li>内容型网站（如博客、新闻站点）</li><li>对SEO有极高要求且内容更新频繁的站点</li><li>功能简单、页面较少的应用</li></ul><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结"><span>七、总结</span></a></h2><p>SPA作为现代前端开发的主流架构，通过路由机制、异步数据交互和组件化开发，为用户提供了流畅的应用体验，同时实现了前后端的高效分离。尽管存在SEO、首次加载等挑战，但随着SSR、代码分割等技术的发展，这些问题已经得到了有效的解决。</p><p>选择SPA还是传统多页应用，应根据项目的具体需求、团队技术栈和用户场景综合考量。无论选择哪种架构，理解其核心原理和优缺点，才能做出最合适的技术决策。</p><p>随着Web技术的不断发展，SPA也在持续演进，未来它将与Web Components、微前端等技术结合，在保持自身优势的同时，进一步解决现有问题，为用户带来更优质的Web体验。</p>`,38))])}const c=h(r,[["render",d]]),y=JSON.parse('{"path":"/article/4tqifnbu/","title":"什么是SPA","lang":"zh-CN","frontmatter":{"title":"什么是SPA","createTime":"2025/06/30 21:31:36","permalink":"/article/4tqifnbu/","tags":["SPA"],"excerpt":"图灵深视一面的一个问题，当时没有答好，现在沉淀一下。","description":"一、SPA的基本概念 概念 SPA（单页应用）是一种特殊的Web应用架构，它通过动态重写当前页面来与用户交互，而不是从服务器加载全新的页面。 这意味着整个应用只需要加载一次HTML、CSS和JavaScript等核心资源，后续的页面切换和数据更新都在客户端完成，无需重新加载整个页面。 与传统多页应用（MPA）的对比 二、SPA的核心原理 SPA之所以能...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是SPA\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-02T11:56:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://try-catch.life/article/4tqifnbu/"}],["meta",{"property":"og:site_name","content":"码不停蹄"}],["meta",{"property":"og:title","content":"什么是SPA"}],["meta",{"property":"og:description","content":"一、SPA的基本概念 概念 SPA（单页应用）是一种特殊的Web应用架构，它通过动态重写当前页面来与用户交互，而不是从服务器加载全新的页面。 这意味着整个应用只需要加载一次HTML、CSS和JavaScript等核心资源，后续的页面切换和数据更新都在客户端完成，无需重新加载整个页面。 与传统多页应用（MPA）的对比 二、SPA的核心原理 SPA之所以能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-02T11:56:44.000Z"}],["meta",{"property":"article:tag","content":"SPA"}],["meta",{"property":"article:modified_time","content":"2025-07-02T11:56:44.000Z"}]]},"readingTime":{"minutes":6.71,"words":2013},"git":{"createdTime":1751292296000,"updatedTime":1751457404000,"contributors":[{"name":"221250108","username":"221250108","email":"221250108@smail.nju.edu.cn","commits":4,"avatar":"https://avatars.githubusercontent.com/221250108?v=4","url":"https://github.com/221250108"}]},"autoDesc":true,"filePathRelative":"Vue/什么是SPA.md","headers":[],"categoryList":[{"id":"2d8ec5","sort":10005,"name":"Vue"}]}');export{c as comp,y as data};
